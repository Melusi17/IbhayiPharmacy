@model IbhayiPharmacy.Models.PharmacistVM.CustomerDashboardVM
@{
    ViewData["Title"] = "Upload Prescription - Customer Dashboard";
    Layout = "~/Views/Shared/CustomerLayout/_CustomerLayout.cshtml";
}
<style>
    /* Upload Prescription Panel */
    .upload-prescription-panel {
        background: white;
        padding: 30px;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.07);
        max-width: 1200px;
        margin: 20px auto;
    }

    /* Buttons */
    .btn-upload {
        background-color: #1f9f77;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        font-size: 15px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        margin: 5px;
    }

        .btn-upload:hover {
            background-color: #28bf96;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

    /* Prescription Table */
    .prescription-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 15px;
        font-size: 14px;
    }

        .prescription-table th,
        .prescription-table td {
            padding: 12px 15px;
            border: 1px solid #ccc;
            text-align: left;
        }

        .prescription-table th {
            background-color: #e0f2f1;
            color: #004d40;
        }

    /* File Upload Area */
    .drop-area {
        border: 2px dashed #1f9f77;
        padding: 40px;
        text-align: center;
        cursor: pointer;
        color: #1f9f77;
        border-radius: 10px;
        margin-bottom: 20px;
        transition: background-color 0.3s;
    }

        .drop-area.drag-over {
            background-color: #e0f7f1;
            border-color: #28bf96;
        }

    /* File Preview */
    .file-preview {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding: 10px;
        background: #f8f9fa;
        border-radius: 5px;
    }

    .btn-remove {
        background-color: #e74c3c;
        color: white;
        border: none;
        padding: 6px 12px;
        border-radius: 4px;
        cursor: pointer;
    }

    /* Checkbox */
    .checkbox-container {
        margin-top: 15px;
        text-align: left;
        width: 100%;
    }

    .checkbox-label {
        display: flex;
        align-items: center;
        font-weight: 500;
        font-size: 14px;
        color: #333;
        gap: 10px;
        justify-content: flex-start;
        margin: 0;
        padding: 0;
        width: fit-content;
        cursor: pointer;
    }

        .checkbox-label input[type="checkbox"] {
            margin: 0;
            width: 18px;
            height: 18px;
            cursor: pointer;
            flex-shrink: 0;
        }

    /* Modals */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.6);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 30px;
        border-radius: 16px;
        width: 90%;
        max-width: 800px;
        box-shadow: 0 4px 16px rgba(0,0,0,0.2);
        max-height: 90vh;
        overflow-y: auto;
    }

    /* Status Messages */
    .loading {
        text-align: center;
        color: #666;
        font-style: italic;
    }

    .error-message {
        text-align: center;
        color: #e74c3c;
        font-weight: 500;
        background-color: #ffeaea;
        padding: 10px;
        border-radius: 5px;
        margin: 10px 0;
    }

    .success-message {
        text-align: center;
        color: #1f9f77;
        font-weight: 500;
        background-color: #e6f5f1;
        padding: 10px;
        border-radius: 5px;
        margin: 10px 0;
    }

    .info-message {
        text-align: center;
        color: #17a2b8;
        font-weight: 500;
        background-color: #d1ecf1;
        padding: 10px;
        border-radius: 5px;
        margin: 10px 0;
    }

    /* Status Badges */
    .status-badge {
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: bold;
    }

    .status-approved {
        background-color: #e6f5f1;
        color: #1f9f77;
    }

    .status-rejected {
        background-color: #ffeaea;
        color: #e74c3c;
    }

    .status-pending {
        background-color: #fff3cd;
        color: #856404;
    }

    .status-ordered {
        background-color: #e3f2fd;
        color: #1976d2;
    }

    .status-completed {
        background-color: #e6f5f1;
        color: #1f9f77;
    }

    .status-dispensed {
        background-color: #e8f5e8;
        color: #2e7d32;
    }

    .status-expired {
        background-color: #f5f5f5;
        color: #757575;
    }

    /* Upload Progress */
    .upload-progress {
        margin: 10px 0;
        display: none;
    }

    .progress-bar {
        width: 100%;
        height: 6px;
        background-color: #f0f0f0;
        border-radius: 3px;
        overflow: hidden;
    }

    .progress-fill {
        height: 100%;
        background-color: #1f9f77;
        width: 0%;
        transition: width 0.3s ease;
    }

    /* Special Cells */
    .filename-cell {
        font-family: 'Courier New', monospace;
        font-weight: bold;
        color: #22586A;
    }

    /* Action Buttons */
    .action-buttons {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .modal-buttons {
        display: flex;
        gap: 10px;
        margin-top: 25px;
        justify-content: center;
        flex-wrap: wrap;
    }

    /* Button Variants */
    .btn-download {
        background-color: #3498db;
    }

        .btn-download:hover {
            background-color: #2980b9;
        }

    .btn-edit {
        background-color: #f39c12;
    }

        .btn-edit:hover {
            background-color: #e67e22;
        }

    .btn-view {
        background-color: #9b59b6;
    }

        .btn-view:hover {
            background-color: #8e44ad;
        }

    .btn-track {
        background-color: #3498db;
    }

        .btn-track:hover {
            background-color: #2980b9;
        }

    .btn-danger {
        background-color: #e74c3c;
    }

        .btn-danger:hover {
            background-color: #c0392b;
        }

    .btn-secondary {
        background-color: #95a5a6;
    }

        .btn-secondary:hover {
            background-color: #7f8c8d;
        }

    /* Prescription Info */
    .prescription-info {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
        border-left: 4px solid #1f9f77;
    }

        .prescription-info p {
            margin: 5px 0;
            font-size: 14px;
        }

    /* Utility Classes */
    .hidden {
        display: none;
    }

    /* Toast Notification */
    .toast-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: none;
        z-index: 9998;
    }

    .toast-notification {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%) scale(0.8);
        background: white;
        padding: 20px 30px;
        border-radius: 12px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.3);
        display: flex;
        align-items: center;
        gap: 15px;
        z-index: 9999;
        opacity: 0;
        transition: all 0.3s ease;
        max-width: 400px;
        text-align: center;
    }

        .toast-notification.show {
            opacity: 1;
            transform: translate(-50%, -50%) scale(1);
        }

    .toast-icon {
        font-size: 24px;
        flex-shrink: 0;
    }

    .toast-message {
        font-weight: 500;
        font-size: 16px;
        color: #333;
    }

    .toast-notification.success {
        border-left: 5px solid #1f9f77;
    }

    .toast-notification.error {
        border-left: 5px solid #e74c3c;
    }

    .toast-notification.warning {
        border-left: 5px solid #f39c12;
    }

    /* Empty State Messages */
    .empty-state-message {
        text-align: center;
        padding: 40px;
        color: #666;
        font-size: 16px;
        background: #f8f9fa;
        border-radius: 10px;
        margin-top: 20px;
        border: 2px dashed #ddd;
    }

        .empty-state-message small {
            color: #888;
            font-size: 14px;
            margin-top: 10px;
            display: block;
        }

    /* View Prescription Modal Styles */
    .prescription-details-info {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
        border-left: 4px solid #1f9f77;
        text-align: center;
    }

        .prescription-details-info p {
            margin: 10px 0;
            font-size: 16px;
            font-weight: 500;
        }

    .medications-section {
        margin: 20px 0;
    }

        .medications-section h3 {
            color: #1f9f77;
            margin-bottom: 15px;
            border-bottom: 2px solid #e0f2f1;
            padding-bottom: 8px;
            text-align: center;
        }

    #orderFromPrescriptionBtn {
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .simple-details {
        font-size: 16px;
        text-align: center;
        margin: 15px 0;
    }

    .detail-item {
        margin: 8px 0;
        padding: 8px;
        background: #e6f5f1;
        border-radius: 6px;
        border-left: 3px solid #1f9f77;
    }

    /* Medication History Styles */
    .medication-history-section {
        margin-top: 40px;
        background: white;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        border: 1px solid #e0f2f1;
    }

    .history-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 2px solid #e0f2f1;
    }

        .history-header h2 {
            color: #1f9f77;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 10px;
        }

    .history-toggle {
        background: #1f9f77;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 14px;
        transition: all 0.3s ease;
    }

        .history-toggle:hover {
            background: #28bf96;
        }

    .history-content {
        display: none;
        margin-top: 15px;
    }

        .history-content.show {
            display: block;
            animation: fadeIn 0.3s ease;
        }

    .history-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 15px;
        font-size: 14px;
    }

        .history-table th,
        .history-table td {
            padding: 12px 15px;
            border: 1px solid #e0f2f1;
            text-align: left;
        }

        .history-table th {
            background-color: #e0f2f1;
            color: #004d40;
            font-weight: 600;
        }

        .history-table tr:hover {
            background-color: #f8f9fa;
        }

    .no-history {
        text-align: center;
        padding: 40px;
        color: #666;
        font-style: italic;
        background: #f8f9fa;
        border-radius: 8px;
        border: 2px dashed #ddd;
    }

    .history-badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 11px;
        font-weight: bold;
        text-transform: uppercase;
    }

    .badge-first-time {
        background-color: #e8f5e8;
        color: #2e7d32;
        border: 1px solid #c8e6c9;
    }

    .badge-refill {
        background-color: #e3f2fd;
        color: #1565c0;
        border: 1px solid #bbdefb;
    }

    /* Medication History Modal */
    .medication-history-modal .modal-content {
        max-width: 900px;
    }

    .history-summary {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
        border-left: 4px solid #1f9f77;
    }

        .history-summary h4 {
            margin: 0 0 10px 0;
            color: #004d40;
        }

    .history-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 15px;
        margin-top: 10px;
    }

    .stat-item {
        text-align: center;
        padding: 10px;
        background: white;
        border-radius: 6px;
        border: 1px solid #e0f2f1;
    }

        .stat-item .stat-value {
            font-size: 24px;
            font-weight: bold;
            color: #1f9f77;
        }

        .stat-item .stat-label {
            font-size: 12px;
            color: #666;
            margin-top: 5px;
        }

    .order-timeline {
        margin-top: 20px;
    }

    .timeline-item {
        padding: 15px;
        margin-bottom: 10px;
        background: #f8f9fa;
        border-radius: 8px;
        border-left: 4px solid #1f9f77;
    }

        .timeline-item:last-child {
            margin-bottom: 0;
        }

    .timeline-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .timeline-date {
        font-weight: bold;
        color: #004d40;
    }

    .timeline-type {
        font-size: 12px;
        padding: 2px 8px;
        border-radius: 10px;
    }

    .timeline-details {
        font-size: 14px;
        color: #666;
    }

    /* Repeat Badge */
    .repeat-badge {
        display: inline-block;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 11px;
        font-weight: bold;
        margin-left: 5px;
    }

    .repeats-available {
        background-color: #e8f5e8;
        color: #2e7d32;
        border: 1px solid #c8e6c9;
    }

    .no-repeats {
        background-color: #fff3e0;
        color: #ef6c00;
        border: 1px solid #ffcc80;
    }

    /* Animations */
    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .upload-prescription-panel {
            padding: 20px;
        }

        .history-header {
            flex-direction: column;
            gap: 15px;
            align-items: flex-start;
        }

        .history-stats {
            grid-template-columns: repeat(2, 1fr);
        }

        .action-buttons {
            flex-direction: column;
        }

        .modal-buttons {
            flex-direction: column;
        }

        .btn-upload {
            width: 100%;
            margin: 5px 0;
        }
    }

    .badge-available {
        background-color: #3498db;
        color: white;
        border: 1px solid #2980b9;
    }

    .history-summary {
        background: #e6f5f1;
        padding: 15px;
        border-radius: 8px;
        margin-top: 20px;
        border-left: 4px solid #1f9f77;
    }

    /* Order Progress */
    .order-progress {
        display: inline-block;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 11px;
        font-weight: bold;
        margin-left: 5px;
    }

    .progress-ordered {
        background-color: #e3f2fd;
        color: #1976d2;
        border: 1px solid #bbdefb;
    }

    .progress-partial {
        background-color: #fff3e0;
        color: #ef6c00;
        border: 1px solid #ffcc80;
    }

    /* Clickable Order Number */
    .order-number-link {
        color: #1976d2;
        text-decoration: none;
        font-weight: 600;
        cursor: pointer;
        padding: 4px 8px;
        border-radius: 4px;
        transition: all 0.3s ease;
        border: 1px solid transparent;
    }

        .order-number-link:hover {
            background-color: #e3f2fd;
            border-color: #1976d2;
            text-decoration: underline;
        }

    .order-number-available {
        color: #2e7d32;
        font-weight: 600;
        font-style: italic;
    }
</style>

<!-- Toast Notification -->
<div id="toastBackdrop" class="toast-backdrop"></div>
<div id="toastNotification" class="toast-notification">
    <span class="toast-icon">✅</span>
    <span class="toast-message" id="toastMessage">Operation completed successfully!</span>
</div>

<!-- Medication History Modal -->
<div id="medicationHistoryModal" class="modal-overlay medication-history-modal" style="display: none;">
    <div class="modal-content">
        <h2>📊 Medication Order History</h2>

        <div class="history-summary">
            <h4 id="historyMedicationName">Medication Name</h4>
            <div class="history-stats">
                <div class="stat-item">
                    <div class="stat-value" id="totalOrders">0</div>
                    <div class="stat-label">Total Orders</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="firstTimeOrders">0</div>
                    <div class="stat-label">First Time</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="refillOrders">0</div>
                    <div class="stat-label">Refills</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="totalQuantity">0</div>
                    <div class="stat-label">Total Qty</div>
                </div>
            </div>
        </div>

        <div class="order-timeline" id="orderTimeline">
            <!-- Timeline items will be populated here -->
        </div>

        <div class="modal-buttons">
            <button class="btn-upload btn-secondary" onclick="closeMedicationHistoryModal()">
                ✖️ Close
            </button>
        </div>
    </div>
</div>

<!-- Main Content -->
<main class="main-content" id="mainContent">
    <div class="upload-prescription-panel">
        <h2>📥 Upload Prescription</h2>

        <!-- Upload Status Messages -->
        <div id="uploadStatus"></div>

        <!-- Upload Progress -->
        <div id="uploadProgress" class="upload-progress">
            <div class="progress-bar">
                <div class="progress-fill" id="progressFill"></div>
            </div>
            <p id="progressText">Uploading...</p>
        </div>

        <!-- Upload Form -->
        <form id="uploadForm" method="post" enctype="multipart/form-data">
            @Html.AntiForgeryToken()

            <!-- Drop area -->
            <div id="drop-area" class="drop-area">
                <p>Drag & Drop PDF file here or click to select</p>
                <input type="file" id="prescriptionFile" name="file" accept=".pdf" required hidden>
            </div>

            <!-- File preview with remove button -->
            <div id="filePreview" class="file-preview" style="display:none;">
                <span id="fileName"></span>
                <button type="button" class="btn-remove" onclick="removeSelectedFile()">Remove</button>
            </div>

            <!-- Dispense checkbox -->
            <div class="checkbox-container">
                <label class="checkbox-label">
                    <input type="checkbox" id="dispenseCheckbox" name="dispenseUponApproval">
                    Dispense this prescription upon approval
                </label>
            </div>

            <!-- Upload Button -->
            <button type="button" class="btn-upload" onclick="uploadPrescription()">Upload Prescription</button>
        </form>

        <!-- Unprocessed Prescriptions -->
        <div style="margin-top: 40px;">
            <h2>📋 Unprocessed Prescriptions</h2>
            <div id="unprocessedPrescriptions">
                @if (Model.UnprocessedPrescriptions.Any())
                {
                    <table class="prescription-table">
                        <thead>
                            <tr>
                                <th>Filename</th>
                                <th>Date</th>
                                <th>Status</th>
                                <th>Dispense</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="unprocessedPrescriptionsBody">
                            @foreach (var prescription in Model.UnprocessedPrescriptions)
                            {
                                <tr id="prescription-@prescription.PrescriptionID">
                                    <td class="filename-cell">Prescription_@(prescription.PrescriptionID.ToString("D3"))</td>
                                    <td>@prescription.DateIssued.ToString("yyyy-MM-dd")</td>
                                    <td>@(prescription.Status ?? "Pending")</td>
                                    <td>@(prescription.DispenseUponApproval ? "Yes" : "No")</td>
                                    <td>
                                        <div class="action-buttons">
                                            <button class="btn-upload btn-edit" onclick="openEditModal(@prescription.PrescriptionID)">Edit</button>
                                            <button class="btn-upload btn-view" onclick="viewPrescription(@prescription.PrescriptionID)">View</button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p id="noUnprocessedMessage" class="empty-state-message">📭 No unprocessed prescriptions found. <br><small>Upload a prescription to get started!</small></p>
                }
            </div>
        </div>

        <!-- Processed Prescriptions -->
        <div style="margin-top: 40px;">
            <h2>✅ Processed Prescriptions</h2>
            <div id="processedPrescriptions">
                @if (Model.ProcessedPrescriptions.Any())
                {
                    <table class="prescription-table">
                        <thead>
                            <tr>
                                <th>Filename</th>
                                <th>Date</th>
                                <th>Doctor</th>
                                <th>Status</th>
                                <th>Order Progress</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="processedPrescriptionsBody">
                            @foreach (var prescription in Model.ProcessedPrescriptions)
                            {
                                <tr id="processed-prescription-@prescription.PrescriptionID">
                                    <td class="filename-cell">Prescription_@(prescription.PrescriptionID.ToString("D3"))</td>
                                    <td>@prescription.DateIssued.ToString("yyyy-MM-dd")</td>
                                    <td>@(prescription.Doctors?.Name ?? "Not Assigned")</td>
                                    <td>
                                        @if (prescription.Status == "Processed")
                                        {
                                            <span class="status-badge status-approved">Processed</span>
                                        }
                                        else if (prescription.Status == "Partially Processed")
                                        {
                                            <span class="status-badge status-pending">Partially Processed</span>
                                        }
                                        else if (prescription.Status == "Rejected")
                                        {
                                            <span class="status-badge status-rejected">Rejected</span>
                                        }
                                        else
                                        {
                                            @prescription.Status
                                        }
                                    </td>
                                    <td>
                                        @if (prescription.IsFullyOrdered)
                                        {
                                            <span class="order-progress progress-ordered">✅ All Ordered</span>
                                        }
                                        else if (prescription.IsPartiallyOrdered)
                                        {
                                            <span class="order-progress progress-partial">🔄 Partially Ordered</span>
                                        }
                                        else
                                        {
                                            <span class="order-progress status-pending">📋 Ready to Order</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="action-buttons">
                                            <!-- View Details button -->
                                            <button class="btn-upload btn-view"
                                                    onclick="openViewModal('@prescription.DateIssued.ToString("yyyy-MM-dd")', '@(prescription.Doctors?.Name ?? "Not Assigned")', @prescription.PrescriptionID)">
                                                View Details
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p id="noProcessedMessage" class="empty-state-message">🎉 All medications have been ordered! <br><small>Your processed prescriptions will reappear when you upload new prescriptions that get processed.</small></p>
                }
            </div>
        </div>

        <!-- Medication History Section -->
        <div class="medication-history-section">
            <div class="history-header">
                <h2>📊 Medication History</h2>
                <button class="history-toggle" onclick="toggleHistorySection()">
                    <span id="historyToggleText">Show History</span>
                </button>
            </div>

            <div class="history-content" id="historyContent">
                @if (Model.MedicationHistory != null && Model.MedicationHistory.Any())
                {
                    <table class="history-table">
                        <thead>
                            <tr>
                                <th>Medication</th>
                                <th>Doctor</th>
                                <th>Last Ordered</th>
                                <th>Total Orders</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody id="medicationHistoryBody">
                            @foreach (var medication in Model.MedicationHistory)
                            {
                                <tr>
                                    <td>
                                        <strong>@medication.MedicationName</strong>
                                        @if (medication.RepeatsLeft == 0)
                                        {
                                            <span class="repeat-badge no-repeats" title="No repeats left">
                                                ⏸️ Completed
                                            </span>
                                        }
                                        else if (medication.TotalOrders == 0)
                                        {
                                            <span class="repeat-badge badge-available" title="Available for order">
                                                📋 Available
                                            </span>
                                        }
                                    </td>
                                    <td>@medication.DoctorName</td>
                                    <td>@(medication.LastOrderDate?.ToString("yyyy-MM-dd") ?? "Never")</td>
                                    <td>@medication.TotalOrders</td>
                                    <td>
                                        @if (medication.RepeatsLeft == 0)
                                        {
                                            <span class="status-badge status-completed">Completed</span>
                                        }
                                        else if (medication.IsActive && medication.TotalOrders > 0)
                                        {
                                            <span class="status-badge status-approved">Active</span>
                                        }
                                        else if (medication.TotalOrders == 0)
                                        {
                                            <span class="status-badge status-pending">Ready to Order</span>
                                        }
                                        else
                                        {
                                            <span class="status-badge status-expired">Expired</span>
                                        }
                                    </td>
                                    
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="no-history">
                        <p>📝 No medication history found</p>
                        <small>Your medication order history will appear here once you start ordering medications.</small>
                    </div>
                }
            </div>
        </div>
    </div>
</main>

<!-- View Prescription Modal -->
<div id="viewPrescriptionModal" class="modal-overlay" style="display: none;">
    <div class="modal-content">
        <h2>📋 Prescription Details</h2>

        <!-- Simplified Prescription Info - Only Date and Doctor -->
        <div class="prescription-details-info">
            <div class="simple-details">
                <div class="detail-item">
                    <strong>📅 Date Issued:</strong> <span id="viewDate">-</span>
                </div>
                <div class="detail-item">
                    <strong>👨‍⚕️ Doctor:</strong> <span id="viewDoctor">-</span>
                </div>
            </div>
        </div>

        <div class="medications-section">
            <h3>💊 Medications</h3>
            <table class="prescription-table">
                <thead>
                    <tr>
                        <th>Medication</th>
                        <th>Approval Status</th>
                        <th>Order Status</th>
                        <th>Quantity</th>
                        <th>Instructions</th>
                        <th>Repeats Left</th>
                    </tr>
                </thead>
                <tbody id="viewMedicationsBody">
                    <!-- Medications will be populated here -->
                </tbody>
            </table>
        </div>

        <div class="modal-buttons">
            <a href="#" class="btn-upload" id="orderFromPrescriptionBtn">
                🛒 Place Order for These Medications
            </a>
            <button class="btn-upload btn-secondary" onclick="closeViewModal()">
                ✖️ Close
            </button>
        </div>
    </div>
</div>

<!-- Edit Prescription Modal -->
<div id="editPrescriptionModal" class="modal-overlay" style="display: none;">
    <div class="modal-content">
        <h2>Edit Prescription</h2>

        <!-- Edit Status Messages -->
        <div id="editStatus"></div>

        <!-- Simple prescription info -->
        <div class="prescription-info">
            <p><strong>Prescription:</strong> <span id="currentFileName">-</span></p>
            <p><strong>Status:</strong> <span id="editCurrentStatus">-</span></p>
        </div>

        <!-- Upload Form for Editing -->
        <form id="editUploadForm" method="post" enctype="multipart/form-data">
            @Html.AntiForgeryToken()
            <input type="hidden" id="editPrescriptionIdInput" name="id" value="0">

            <!-- Simple file upload -->
            <div style="margin-bottom: 20px;">
                <label style="display: block; margin-bottom: 8px; font-weight: 600;">Upload New Prescription</label>
                <div id="editDropArea" class="drop-area" style="padding: 20px;">
                    <p>📁 Click to select new PDF file</p>
                    <p style="font-size: 12px; color: #666; margin-top: 5px;">
                        Leave empty to keep current file
                    </p>
                    <input type="file" id="editPrescriptionFile" name="file" accept=".pdf" hidden>
                </div>

                <!-- File preview -->
                <div id="editFilePreview" class="file-preview" style="display:none;">
                    <span id="editFileName" style="font-weight: 500;"></span>
                    <button type="button" class="btn-remove" onclick="removeEditSelectedFile()">Remove</button>
                </div>
            </div>

            <!-- Simple checkbox -->
            <div class="checkbox-container">
                <label class="checkbox-label">
                    <input type="checkbox" id="editDispenseCheckbox" name="dispenseUponApproval">
                    Dispense upon approval
                </label>
            </div>

            <!-- Clear Action Buttons -->
            <div class="modal-buttons">
                <button type="button" class="btn-upload" onclick="updatePrescription()" style="min-width: 140px;">
                    Save Changes
                </button>
                <button type="button" class="btn-upload btn-danger" onclick="deletePrescription()" style="min-width: 140px;">
                    Delete
                </button>
                <button type="button" class="btn-upload btn-secondary" onclick="closeEditModal()" style="min-width: 140px;">
                    Cancel
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    // Enhanced Toast notification function
    function showToast(message, type = 'success', duration = 5000) {
        const toast = document.getElementById('toastNotification');
        const backdrop = document.getElementById('toastBackdrop');
        const toastMessage = document.getElementById('toastMessage');

        // Set message and style based on type
        toastMessage.textContent = message;

        // Remove previous classes
        toast.classList.remove('success', 'error', 'warning');
        toast.classList.add(type);

        // Set icon based on type
        const toastIcon = toast.querySelector('.toast-icon');
        if (type === 'error') {
            toastIcon.textContent = '❌';
        } else if (type === 'warning') {
            toastIcon.textContent = '⚠️';
        } else {
            toastIcon.textContent = '✅';
        }

        // Show toast with backdrop
        toast.classList.add('show');
        backdrop.style.display = 'block';
        setTimeout(() => backdrop.classList.add('show'), 10);

        // Clear any existing timeout
        if (window.toastTimeout) {
            clearTimeout(window.toastTimeout);
        }

        // Hide after specified duration (default 5 seconds)
        window.toastTimeout = setTimeout(() => {
            hideToast();
        }, duration);
    }

    // Function to manually hide toast
    function hideToast() {
        const toast = document.getElementById('toastNotification');
        const backdrop = document.getElementById('toastBackdrop');

        toast.classList.remove('show');
        backdrop.classList.remove('show');

        setTimeout(() => {
            backdrop.style.display = 'none';
        }, 300);

        if (window.toastTimeout) {
            clearTimeout(window.toastTimeout);
        }
    }

    // Medication History Functions
    function toggleHistorySection() {
        const content = document.getElementById('historyContent');
        const toggleText = document.getElementById('historyToggleText');

        if (content.classList.contains('show')) {
            content.classList.remove('show');
            toggleText.textContent = 'Show History';
        } else {
            content.classList.add('show');
            toggleText.textContent = 'Hide History';
        }
    }

    async function viewMedicationHistory(medicationId, medicationName) {
        try {
            console.log('💊 Loading history for:', medicationName, 'ID:', medicationId);

            // Show loading state
            document.getElementById('historyMedicationName').textContent = medicationName;
            document.getElementById('totalOrders').textContent = '0';
            document.getElementById('firstTimeOrders').textContent = '0';
            document.getElementById('refillOrders').textContent = '0';
            document.getElementById('totalQuantity').textContent = '0';
            document.getElementById('orderTimeline').innerHTML = '<div class="loading">🔄 Loading medication history...</div>';

            // Show modal
            document.getElementById('medicationHistoryModal').style.display = 'flex';

            // Fetch medication history
            const response = await fetch(`/CustomerDashboard/GetMedicationHistory?medicationId=${medicationId}`);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            console.log('📦 API Result:', result);

            if (!result.success) {
                throw new Error(result.message || 'Failed to load history');
            }

            // Update statistics
            document.getElementById('totalOrders').textContent = result.statistics?.TotalOrders || 0;
            document.getElementById('firstTimeOrders').textContent = result.statistics?.FirstTimeOrders || 0;
            document.getElementById('refillOrders').textContent = result.statistics?.RefillOrders || 0;
            document.getElementById('totalQuantity').textContent = result.statistics?.TotalQuantity || 0;

            // Populate timeline
            const timeline = document.getElementById('orderTimeline');
            timeline.innerHTML = '';

            if (!result.history || result.history.length === 0) {
                timeline.innerHTML = `
                    <div class="no-history" style="text-align: center; padding: 40px; color: #666;">
                        <div style="font-size: 48px; margin-bottom: 15px;">📭</div>
                        <h4>No History Found</h4>
                        <p>No orders or approved prescriptions found for this medication.</p>
                    </div>
                `;
                return;
            }

            result.history.forEach(item => {
                const timelineItem = document.createElement('div');
                timelineItem.className = 'timeline-item';

                // Determine badge and styling based on type
                let badge = '';
                let borderColor = '#1f9f77';

                if (item.Type === 'Available') {
                    badge = '<span class="history-badge badge-available">Available</span>';
                    borderColor = '#3498db';
                    timelineItem.style.borderLeft = `4px solid ${borderColor}`;
                    timelineItem.style.background = '#e3f2fd';
                } else if (item.IsFirstTimeOrder) {
                    badge = '<span class="history-badge badge-first-time">First Time</span>';
                } else {
                    badge = '<span class="history-badge badge-refill">Refill</span>';
                }

                timelineItem.innerHTML = `
                    <div class="timeline-header">
                        <span class="timeline-date">${item.OrderDate || 'N/A'}</span>
                        ${badge}
                    </div>
                    <div class="timeline-details">
                        <strong>Order #:</strong> ${item.OrderNumber || 'N/A'}<br>
                        <strong>Quantity:</strong> ${item.Quantity || '0'}<br>
                        <strong>Status:</strong> ${item.Status || 'N/A'}<br>
                        <strong>Doctor:</strong> ${item.DoctorName || 'Unknown Doctor'}<br>
                        <strong>Repeats Left:</strong> ${item.RepeatsLeft ?? 'N/A'} of ${item.TotalRepeats ?? 'N/A'}
                        ${item.ItemPrice > 0 ? `<br><strong>Price:</strong> R ${item.ItemPrice}` : ''}
                        ${item.LineTotal > 0 ? `<br><strong>Line Total:</strong> R ${item.LineTotal}` : ''}
                        ${item.Instructions ? `<br><strong>Instructions:</strong> ${item.Instructions}` : ''}
                        ${item.Type === 'Available' ? '<br><strong>💡 Ready to order from Place Order page</strong>' : ''}
                    </div>
                `;

                timeline.appendChild(timelineItem);
            });

            // Show summary
            if (result.statistics.AvailablePrescriptions > 0) {
                const summary = document.createElement('div');
                summary.className = 'history-summary';
                summary.style.background = '#e6f5f1';
                summary.style.padding = '15px';
                summary.style.borderRadius = '8px';
                summary.style.marginTop = '20px';
                summary.style.borderLeft = '4px solid #1f9f77';

                summary.innerHTML = `
                    <h4 style="margin: 0 0 10px 0; color: #004d40;">📊 Summary</h4>
                    <p style="margin: 5px 0;"><strong>Total Orders:</strong> ${result.statistics.TotalOrders}</p>
                    <p style="margin: 5px 0;"><strong>Available for Order:</strong> ${result.statistics.AvailablePrescriptions} prescription(s)</p>
                    <p style="margin: 5px 0;"><strong>Total Quantity Ordered:</strong> ${result.statistics.TotalQuantity}</p>
                    ${result.statistics.TotalValue > 0 ? `<p style="margin: 5px 0;"><strong>Total Value:</strong> R ${result.statistics.TotalValue}</p>` : ''}
                `;

                timeline.appendChild(summary);
            }

        } catch (error) {
            console.error('❌ Error loading medication history:', error);
            document.getElementById('orderTimeline').innerHTML = `
                <div class="error-message">
                    ❌ Error loading medication history: ${error.message}
                </div>
            `;
        }
    }

    function closeMedicationHistoryModal() {
        document.getElementById('medicationHistoryModal').style.display = 'none';
    }

    // View Prescription Modal Functions
    function openViewModal(date, doctor, prescriptionId) {
        console.log('Opening view modal for prescription:', prescriptionId);

        // Set only date and doctor (simplified)
        document.getElementById("viewDate").textContent = date;
        document.getElementById("viewDoctor").textContent = doctor;

        // Set the order button href to redirect to CustomerOrders
        const orderBtn = document.getElementById('orderFromPrescriptionBtn');
        orderBtn.href = '@Url.Action("PlaceOrder", "CustomerOrders")' + '?prescriptionId=' + prescriptionId;

        // Show modal
        document.getElementById("viewPrescriptionModal").style.display = "flex";

        // Load medications for this prescription
        loadPrescriptionMedications(prescriptionId);
    }

    function closeViewModal() {
        document.getElementById("viewPrescriptionModal").style.display = "none";
    }

    // Enhanced function to load prescription medications with order status
    async function loadPrescriptionMedications(prescriptionId) {
        try {
            const tbody = document.getElementById('viewMedicationsBody');
            tbody.innerHTML = '<tr><td colspan="6" class="loading">🔄 Loading medications...</td></tr>';

            const response = await fetch('@Url.Action("GetPrescriptionMedications", "CustomerDashboard")?prescriptionId=' + prescriptionId);

            if (!response.ok) throw new Error('Network error');

            const result = await response.json();

            tbody.innerHTML = '';

            if (!result.success || !result.medications || result.medications.length === 0) {
                tbody.innerHTML = '<tr><td colspan="6" class="loading">No medications found for this prescription</td></tr>';
                return;
            }

            result.medications.forEach(med => {
                // Status badge based on approval status
                let statusBadge = '';
                if (med.status === "Approved") {
                    statusBadge = '<span class="status-badge status-approved">✅ Approved</span>';
                } else if (med.status === "Rejected") {
                    statusBadge = '<span class="status-badge status-rejected">❌ Rejected</span>';
                } else {
                    statusBadge = '<span class="status-badge status-pending">⏳ Pending</span>';
                }

                // Order status badge
                let orderStatusBadge = '';
                if (med.isOrdered) {
                    if (med.orderStatus === "Completed" || med.orderStatus === "Dispensed") {
                        orderStatusBadge = '<span class="status-badge status-completed">✅ Ordered</span>';
                    } else if (med.orderStatus === "Cancelled") {
                        orderStatusBadge = '<span class="status-badge status-rejected">❌ Cancelled</span>';
                    } else {
                        orderStatusBadge = '<span class="status-badge status-ordered">🛒 Ordered</span>';
                    }
                } else {
                    orderStatusBadge = '<span class="status-badge status-pending">📋 Not Ordered</span>';
                }

                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><strong>${med.name}</strong></td>
                    <td>${statusBadge}</td>
                    <td>${orderStatusBadge}</td>
                    <td>${med.quantity}</td>
                    <td>${med.instructions}</td>
                    <td>${med.repeatsLeft} of ${med.repeats}</td>
                `;
                tbody.appendChild(row);
            });

        } catch (error) {
            console.error('Error loading prescription medications:', error);
            const tbody = document.getElementById('viewMedicationsBody');
            tbody.innerHTML = '<tr><td colspan="6" class="error-message">❌ Error loading medications</td></tr>';
        }
    }

    // File upload functionality
    document.addEventListener("DOMContentLoaded", function () {
        setupFileUpload();
        setupEditFileUpload();
        checkAndDisplayEmptyStates();

        // Allow clicking backdrop to close toast
        const backdrop = document.getElementById('toastBackdrop');
        if (backdrop) {
            backdrop.addEventListener('click', hideToast);
        }

        // Close view modal when clicking outside
        const viewModal = document.getElementById('viewPrescriptionModal');
        if (viewModal) {
            viewModal.addEventListener('click', function(e) {
                if (e.target === this) {
                    closeViewModal();
                }
            });
        }

        // Close medication history modal when clicking outside
        const historyModal = document.getElementById('medicationHistoryModal');
        if (historyModal) {
            historyModal.addEventListener('click', function(e) {
                if (e.target === this) {
                    closeMedicationHistoryModal();
                }
            });
        }

        // Close edit modal when clicking outside
        const editModal = document.getElementById('editPrescriptionModal');
        if (editModal) {
            editModal.addEventListener('click', function(e) {
                if (e.target === this) {
                    closeEditModal();
                }
            });
        }
    });

    function setupFileUpload() {
        const dropArea = document.getElementById('drop-area');
        const fileInput = document.getElementById('prescriptionFile');
        const filePreview = document.getElementById('filePreview');
        const fileNameDisplay = document.getElementById('fileName');

        if (!dropArea || !fileInput) return;

        dropArea.addEventListener('click', () => fileInput.click());

        fileInput.addEventListener('change', (e) => {
            handleFileUpload(e.target.files[0]);
        });

        dropArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropArea.classList.add('drag-over');
        });

        dropArea.addEventListener('dragleave', () => {
            dropArea.classList.remove('drag-over');
        });

        dropArea.addEventListener('drop', (e) => {
            e.preventDefault();
            dropArea.classList.remove('drag-over');
            const file = e.dataTransfer.files[0];
            if (file) {
                fileInput.files = e.dataTransfer.files;
                handleFileUpload(file);
            }
        });

        function handleFileUpload(file) {
            if (file.type !== 'application/pdf') {
                showUploadStatus('Please select a PDF file only.', 'error');
                return;
            }
            fileNameDisplay.textContent = file.name;
            filePreview.style.display = 'flex';
        }
    }

    function removeSelectedFile() {
        const fileInput = document.getElementById('prescriptionFile');
        const filePreview = document.getElementById('filePreview');
        const fileNameDisplay = document.getElementById('fileName');

        if (fileInput) {
            fileInput.value = "";
            filePreview.style.display = "none";
            fileNameDisplay.textContent = "";
        }
    }

    // Upload prescription via AJAX
    async function uploadPrescription() {
        const fileInput = document.getElementById('prescriptionFile');
        const file = fileInput.files[0];
        const dispenseCheckbox = document.getElementById('dispenseCheckbox');

        if (!file) {
            showUploadStatus('Please select a file to upload.', 'error');
            return;
        }

        if (file.type !== 'application/pdf') {
            showUploadStatus('Only PDF files are allowed.', 'error');
            return;
        }

        // Show progress
        showUploadProgress(true);
        showUploadStatus('', 'clear');

        const formData = new FormData();
        formData.append('file', file);
        formData.append('dispenseUponApproval', dispenseCheckbox.checked);
        formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

        try {
            const response = await fetch('@Url.Action("UploadPrescription", "CustomerDashboard")', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (result.success) {
                showUploadStatus('✅ ' + result.message, 'success');
                addPrescriptionToTable(result);
                removeSelectedFile();
                resetForm();
                refreshPrescriptionsData();
            } else {
                showUploadStatus('❌ ' + result.message, 'error');
            }
        } catch (error) {
            showUploadStatus('❌ Error uploading prescription: ' + error.message, 'error');
        } finally {
            showUploadProgress(false);
        }
    }

    function showUploadStatus(message, type) {
        const statusDiv = document.getElementById('uploadStatus');
        statusDiv.innerHTML = '';

        if (message) {
            const messageDiv = document.createElement('div');
            messageDiv.className = type === 'success' ? 'success-message' : 'error-message';
            messageDiv.textContent = message;
            statusDiv.appendChild(messageDiv);
        }
    }

    function showUploadProgress(show) {
        const progressDiv = document.getElementById('uploadProgress');
        if (show) {
            progressDiv.style.display = 'block';
            document.getElementById('progressFill').style.width = '0%';
        } else {
            progressDiv.style.display = 'none';
        }
    }

    function addPrescriptionToTable(result) {
        // Remove "no prescriptions" message if it exists
        const noUnprocessedMessage = document.getElementById('noUnprocessedMessage');
        if (noUnprocessedMessage) {
            noUnprocessedMessage.remove();
        }

        // Get or create the table body
        let tbody = document.getElementById('unprocessedPrescriptionsBody');
        if (!tbody) {
            // Create table structure if it doesn't exist
            const table = document.createElement('table');
            table.className = 'prescription-table';
            table.innerHTML = `
                <thead>
                    <tr>
                        <th>Filename</th>
                        <th>Date</th>
                        <th>Status</th>
                        <th>Dispense</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="unprocessedPrescriptionsBody"></tbody>
            `;
            document.getElementById('unprocessedPrescriptions').appendChild(table);
            tbody = document.getElementById('unprocessedPrescriptionsBody');
        }

        // Format the prescription ID with leading zeros
        const formattedId = result.prescriptionId.toString().padStart(3, '0');

        // Add new prescription row with View button instead of Download
        const newRow = document.createElement('tr');
        newRow.id = 'prescription-' + result.prescriptionId;
        newRow.innerHTML = `
            <td class="filename-cell">Prescription_${formattedId}</td>
            <td>${result.date}</td>
            <td>${result.status}</td>
            <td>${result.dispense}</td>
            <td>
                <div class="action-buttons">
                    <button class="btn-upload btn-edit" onclick="openEditModal(${result.prescriptionId})">Edit</button>
                    <button class="btn-upload btn-view" onclick="viewPrescription(${result.prescriptionId})">View</button>
                </div>
            </td>
        `;

        tbody.appendChild(newRow);
    }

    function resetForm() {
        document.getElementById('dispenseCheckbox').checked = false;
    }

    // View Prescription Function
    function viewPrescription(prescriptionId) {
        // Open the prescription in a new tab for viewing
        window.open('@Url.Action("DownloadPrescription", "CustomerDashboard")/' + prescriptionId, '_blank');
    }

    // Edit Prescription Modal Functions
    let currentEditPrescriptionId = null;

    function openEditModal(prescriptionId) {
        currentEditPrescriptionId = prescriptionId;
        document.getElementById("editPrescriptionModal").style.display = "flex";
        resetEditForm();
        loadPrescriptionDetails(prescriptionId);
    }

    function closeEditModal() {
        document.getElementById("editPrescriptionModal").style.display = "none";
        currentEditPrescriptionId = null;
    }

    async function loadPrescriptionDetails(prescriptionId) {
        try {
            showEditStatus('Loading prescription details...', 'info');

            const response = await fetch(`/CustomerDashboard/GetPrescriptionDetails?id=${prescriptionId}`);

            if (!response.ok) throw new Error('Network error');

            const result = await response.json();

            if (result.success) {
                document.getElementById("editCurrentStatus").textContent = result.status;
                document.getElementById("editPrescriptionIdInput").value = result.prescriptionId;
                document.getElementById("editDispenseCheckbox").checked = result.dispenseUponApproval;
                document.getElementById("currentFileName").textContent = result.fileName;

                showEditStatus('', 'clear');
            } else {
                showEditStatus(result.message, 'error');
            }
        } catch (error) {
            showEditStatus('Error loading details', 'error');
        }
    }

    function resetEditForm() {
        const fileInput = document.getElementById('editPrescriptionFile');
        const filePreview = document.getElementById('editFilePreview');

        if (fileInput) fileInput.value = "";
        if (filePreview) filePreview.style.display = "none";

        document.getElementById('editFileName').textContent = "";
        showEditStatus('', 'clear');
    }

    function removeEditSelectedFile() {
        const fileInput = document.getElementById('editPrescriptionFile');
        const filePreview = document.getElementById('editFilePreview');
        if (fileInput) {
            fileInput.value = "";
            filePreview.style.display = "none";
            document.getElementById('editFileName').textContent = "";
        }
    }

    function setupEditFileUpload() {
        const dropArea = document.getElementById('editDropArea');
        const fileInput = document.getElementById('editPrescriptionFile');
        const filePreview = document.getElementById('editFilePreview');

        if (!dropArea || !fileInput) return;

        dropArea.addEventListener('click', () => fileInput.click());

        fileInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file && file.type === 'application/pdf') {
                document.getElementById('editFileName').textContent = file.name;
                filePreview.style.display = 'flex';
            }
        });

        dropArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropArea.classList.add('drag-over');
        });

        dropArea.addEventListener('dragleave', () => {
            dropArea.classList.remove('drag-over');
        });

        dropArea.addEventListener('drop', (e) => {
            e.preventDefault();
            dropArea.classList.remove('drag-over');
            const file = e.dataTransfer.files[0];
            if (file) {
                fileInput.files = e.dataTransfer.files;
                if (file.type === 'application/pdf') {
                    document.getElementById('editFileName').textContent = file.name;
                    filePreview.style.display = 'flex';
                }
            }
        });
    }

    async function updatePrescription() {
        const fileInput = document.getElementById('editPrescriptionFile');
        const file = fileInput.files[0];
        const dispenseCheckbox = document.getElementById('editDispenseCheckbox');
        const prescriptionId = currentEditPrescriptionId;

        if (!prescriptionId) {
            showEditStatus('No prescription selected', 'error');
            return;
        }

        if (file && file.type !== 'application/pdf') {
            showEditStatus('Only PDF files allowed', 'error');
            return;
        }

        showEditStatus('Updating prescription...', 'info');

        const formData = new FormData();
        formData.append('id', prescriptionId);
        if (file) formData.append('file', file);
        formData.append('dispenseUponApproval', dispenseCheckbox.checked);
        formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

        try {
            const response = await fetch('/CustomerDashboard/UpdatePrescriptionDocument', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (result.success) {
                showEditStatus('Prescription updated successfully!', 'success');
                updatePrescriptionInTable(prescriptionId, result);
                setTimeout(() => {
                    closeEditModal();
                    refreshPrescriptionsData();
                }, 1500);
            } else {
                showEditStatus(result.message, 'error');
            }
        } catch (error) {
            showEditStatus('Error updating prescription', 'error');
        }
    }

    async function deletePrescription() {
        const prescriptionId = currentEditPrescriptionId;

        if (!prescriptionId) {
            showEditStatus('No prescription selected', 'error');
            return;
        }

        if (!confirm('Are you sure you want to delete this prescription? This cannot be undone.')) {
            return;
        }

        showEditStatus('Deleting prescription...', 'info');

        try {
            const formData = new FormData();
            formData.append('id', prescriptionId);
            formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

            const response = await fetch('/CustomerDashboard/DeletePrescription', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (result.success) {
                showEditStatus('Prescription deleted successfully!', 'success');
                removePrescriptionFromTable(prescriptionId);
                setTimeout(() => {
                    closeEditModal();
                    refreshPrescriptionsData();
                }, 1500);
            } else {
                showEditStatus(result.message, 'error');
            }
        } catch (error) {
            showEditStatus('Error deleting prescription', 'error');
        }
    }

    function showEditStatus(message, type) {
        const statusDiv = document.getElementById('editStatus');
        statusDiv.innerHTML = message ? `<div class="${type === 'success' ? 'success-message' : type === 'info' ? 'info-message' : 'error-message'}">${message}</div>` : '';
    }

    function updatePrescriptionInTable(prescriptionId, result) {
        const row = document.getElementById('prescription-' + prescriptionId);
        if (row) {
            row.cells[1].textContent = result.date;
            row.cells[3].textContent = result.dispense;
        }
    }

    function removePrescriptionFromTable(prescriptionId) {
        const row = document.getElementById('prescription-' + prescriptionId);
        if (row) row.remove();

        const tbody = document.getElementById('unprocessedPrescriptionsBody');
        if (tbody && tbody.children.length === 0) {
            document.getElementById('unprocessedPrescriptions').innerHTML = '<p id="noUnprocessedMessage" class="empty-state-message">📭 No unprocessed prescriptions found. <br><small>Upload a prescription to get started!</small></p>';
        }
    }

    // Enhanced function to check and display empty states
    function checkAndDisplayEmptyStates() {
        // Check processed prescriptions
        const processedSection = document.getElementById('processedPrescriptions');
        if (processedSection) {
            const processedTable = processedSection.querySelector('table');
            const processedBody = processedSection.querySelector('tbody');
            const hasRows = processedBody && processedBody.querySelectorAll('tr').length > 0;
            const emptyMessage = document.getElementById('noProcessedMessage');

            if (!hasRows) {
                if (!emptyMessage) {
                    const newEmptyMessage = document.createElement('p');
                    newEmptyMessage.id = 'noProcessedMessage';
                    newEmptyMessage.className = 'empty-state-message';
                    newEmptyMessage.innerHTML = '🎉 All medications have been ordered! <br><small>Your processed prescriptions will reappear when you upload new prescriptions that get processed.</small>';
                    processedSection.appendChild(newEmptyMessage);
                }
            } else if (hasRows && emptyMessage) {
                emptyMessage.remove();
            }
        }

        // Check unprocessed prescriptions
        const unprocessedPrescriptionsDiv = document.getElementById('unprocessedPrescriptions');
        if (unprocessedPrescriptionsDiv) {
            const unprocessedTable = unprocessedPrescriptionsDiv.querySelector('table');
            const unprocessedBody = document.getElementById('unprocessedPrescriptionsBody');
            const hasRows = unprocessedBody && unprocessedBody.querySelectorAll('tr').length > 0;
            const emptyMessage = document.getElementById('noUnprocessedMessage');

            if (!hasRows && !emptyMessage) {
                const newEmptyMessage = document.createElement('p');
                newEmptyMessage.id = 'noUnprocessedMessage';
                newEmptyMessage.className = 'empty-state-message';
                newEmptyMessage.innerHTML = '📭 No unprocessed prescriptions found. <br><small>Upload a prescription to get started!</small>';
                unprocessedPrescriptionsDiv.appendChild(newEmptyMessage);
            } else if (hasRows && emptyMessage) {
                emptyMessage.remove();
            }
        }

        // Check medication history
        const historyContent = document.getElementById('historyContent');
        if (historyContent) {
            const historyTable = historyContent.querySelector('table');
            const historyBody = historyContent.querySelector('tbody');
            const hasRows = historyBody && historyBody.querySelectorAll('tr').length > 0;
            const noHistoryDiv = historyContent.querySelector('.no-history');

            if (!hasRows && !noHistoryDiv) {
                const newNoHistory = document.createElement('div');
                newNoHistory.className = 'no-history';
                newNoHistory.innerHTML = `
                    <p>📝 No medication history found</p>
                    <small>Your medication order history will appear here once you start ordering medications.</small>
                `;
                historyContent.appendChild(newNoHistory);
            } else if (hasRows && noHistoryDiv) {
                noHistoryDiv.remove();
            }
        }
    }

    // Refresh prescriptions data after operations
    async function refreshPrescriptionsData() {
        try {
            console.log('🔄 Refreshing prescriptions data...');
            showToast('🔄 Refreshing data...', 'info', 2000);

            setTimeout(() => {
                location.reload();
            }, 1000);

        } catch (error) {
            console.error('❌ Error refreshing data:', error);
            showToast('❌ Error refreshing data', 'error');
            location.reload();
        }
    }

    // Keyboard shortcuts
    document.addEventListener('keydown', function(e) {
        // ESC key closes modals
        if (e.key === 'Escape') {
            if (document.getElementById('viewPrescriptionModal').style.display === 'flex') {
                closeViewModal();
            }
            if (document.getElementById('editPrescriptionModal').style.display === 'flex') {
                closeEditModal();
            }
            if (document.getElementById('medicationHistoryModal').style.display === 'flex') {
                closeMedicationHistoryModal();
            }
            hideToast();
        }
    });
</script>
@model IbhayiPharmacy.Models.PharmacistVM.CustomerDashboardVM
@{
    ViewData["Title"] = "Customer Dashboard";
    Layout = "~/Views/Shared/CustomerLayout/_CustomerLayout.cshtml";
}
<style>
    /* Upload Prescription Panel */
    .upload-prescription-panel {
        background: white;
        padding: 30px;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.07);
        max-width: 1200px;
        margin: 20px auto;
    }

    /* Buttons */
    .btn-upload {
        background-color: #1f9f77;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        font-size: 15px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        margin: 5px;
    }

        .btn-upload:hover {
            background-color: #28bf96;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

    /* Prescription Table */
    .prescription-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 15px;
        font-size: 14px;
    }

        .prescription-table th,
        .prescription-table td {
            padding: 12px 15px;
            border: 1px solid #ccc;
            text-align: left;
        }

        .prescription-table th {
            background-color: #e0f2f1;
            color: #004d40;
        }

    /* File Upload Area */
    .drop-area {
        border: 2px dashed #1f9f77;
        padding: 40px;
        text-align: center;
        cursor: pointer;
        color: #1f9f77;
        border-radius: 10px;
        margin-bottom: 20px;
        transition: background-color 0.3s;
    }

        .drop-area.drag-over {
            background-color: #e0f7f1;
            border-color: #28bf96;
        }

    /* File Preview */
    .file-preview {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding: 10px;
        background: #f8f9fa;
        border-radius: 5px;
    }

    .btn-remove {
        background-color: #e74c3c;
        color: white;
        border: none;
        padding: 6px 12px;
        border-radius: 4px;
        cursor: pointer;
    }

    /* Checkbox - Clean left alignment */
    .checkbox-container {
        margin-top: 15px;
        text-align: left;
        width: 100%;
    }

    .checkbox-label {
        display: flex;
        align-items: center;
        font-weight: 500;
        font-size: 14px;
        color: #333;
        gap: 10px;
        justify-content: flex-start;
        margin: 0;
        padding: 0;
        width: fit-content;
        cursor: pointer;
    }

        .checkbox-label input[type="checkbox"] {
            margin: 0;
            width: 18px;
            height: 18px;
            cursor: pointer;
            flex-shrink: 0;
        }

    /* Modals */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.6);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 30px;
        border-radius: 16px;
        width: 90%;
        max-width: 800px;
        box-shadow: 0 4px 16px rgba(0,0,0,0.2);
        max-height: 90vh;
        overflow-y: auto;
    }

    /* Status Messages */
    .loading {
        text-align: center;
        color: #666;
        font-style: italic;
    }

    .error-message {
        text-align: center;
        color: #e74c3c;
        font-weight: 500;
        background-color: #ffeaea;
        padding: 10px;
        border-radius: 5px;
        margin: 10px 0;
    }

    .success-message {
        text-align: center;
        color: #1f9f77;
        font-weight: 500;
        background-color: #e6f5f1;
        padding: 10px;
        border-radius: 5px;
        margin: 10px 0;
    }

    .info-message {
        text-align: center;
        color: #17a2b8;
        font-weight: 500;
        background-color: #d1ecf1;
        padding: 10px;
        border-radius: 5px;
        margin: 10px 0;
    }

    /* Status Badges */
    .status-badge {
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: bold;
    }

    .status-approved {
        background-color: #e6f5f1;
        color: #1f9f77;
    }

    .status-rejected {
        background-color: #ffeaea;
        color: #e74c3c;
    }

    .status-pending {
        background-color: #fff3cd;
        color: #856404;
    }

    .status-ordered {
        background-color: #e3f2fd;
        color: #1976d2;
    }

    .status-completed {
        background-color: #e6f5f1;
        color: #1f9f77;
    }

    /* Upload Progress */
    .upload-progress {
        margin: 10px 0;
        display: none;
    }

    .progress-bar {
        width: 100%;
        height: 6px;
        background-color: #f0f0f0;
        border-radius: 3px;
        overflow: hidden;
    }

    .progress-fill {
        height: 100%;
        background-color: #1f9f77;
        width: 0%;
        transition: width 0.3s ease;
    }

    /* Special Cells */
    .filename-cell {
        font-family: 'Courier New', monospace;
        font-weight: bold;
        color: #22586A;
    }

    /* Welcome Panel */
    .welcome-panel {
        background: white;
        padding: 40px;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.07);
        max-width: 800px;
        margin: 50px auto;
        text-align: center;
    }

    .welcome-title {
        font-size: 28px;
        color: #1f9f77;
        margin-bottom: 15px;
    }

    .welcome-subtitle {
        font-size: 16px;
        color: #666;
        margin-bottom: 30px;
    }

    /* Feature Grid */
    .feature-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-top: 30px;
    }

    .feature-card {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
        border-left: 4px solid #1f9f77;
        text-align: center;
    }

    .feature-icon {
        font-size: 24px;
        margin-bottom: 10px;
    }

    .feature-title {
        font-weight: 600;
        color: #333;
        margin-bottom: 5px;
    }

    .feature-desc {
        font-size: 14px;
        color: #666;
    }

    /* Action Buttons */
    .action-buttons {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .modal-buttons {
        display: flex;
        gap: 10px;
        margin-top: 25px;
        justify-content: center;
        flex-wrap: wrap;
    }

    /* Button Variants */
    .btn-download {
        background-color: #3498db;
    }

        .btn-download:hover {
            background-color: #2980b9;
        }

    .btn-edit {
        background-color: #f39c12;
    }

        .btn-edit:hover {
            background-color: #e67e22;
        }

    .btn-view {
        background-color: #9b59b6;
    }

        .btn-view:hover {
            background-color: #8e44ad;
        }

    .btn-track {
        background-color: #3498db;
    }

        .btn-track:hover {
            background-color: #2980b9;
        }

    .btn-danger {
        background-color: #e74c3c;
    }

        .btn-danger:hover {
            background-color: #c0392b;
        }

    .btn-secondary {
        background-color: #95a5a6;
    }

        .btn-secondary:hover {
            background-color: #7f8c8d;
        }

    /* Prescription Info */
    .prescription-info {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
        border-left: 4px solid #1f9f77;
    }

        .prescription-info p {
            margin: 5px 0;
            font-size: 14px;
        }

    /* Order Summary */
    .total-summary {
        margin-top: 20px;
        font-size: 16px;
        font-weight: bold;
    }

    /* Utility Classes */
    .hidden {
        display: none;
    }

    /* Toast Notification */
    .toast-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: none;
        z-index: 9998;
    }

    .toast-notification {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%) scale(0.8);
        background: white;
        padding: 20px 30px;
        border-radius: 12px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.3);
        display: flex;
        align-items: center;
        gap: 15px;
        z-index: 9999;
        opacity: 0;
        transition: all 0.3s ease;
        max-width: 400px;
        text-align: center;
    }

        .toast-notification.show {
            opacity: 1;
            transform: translate(-50%, -50%) scale(1);
        }

    .toast-icon {
        font-size: 24px;
        flex-shrink: 0;
    }

    .toast-message {
        font-weight: 500;
        font-size: 16px;
        color: #333;
    }

    .toast-notification.success {
        border-left: 5px solid #1f9f77;
    }

    .toast-notification.error {
        border-left: 5px solid #e74c3c;
    }

    .toast-notification.warning {
        border-left: 5px solid #f39c12;
    }

    /* Empty State Messages */
    .empty-state-message {
        text-align: center;
        padding: 40px;
        color: #666;
        font-size: 16px;
        background: #f8f9fa;
        border-radius: 10px;
        margin-top: 20px;
        border: 2px dashed #ddd;
    }

        .empty-state-message small {
            color: #888;
            font-size: 14px;
            margin-top: 10px;
            display: block;
        }

    /* Ordered Prescriptions Section */
    .ordered-prescriptions-section {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
        border: 2px solid #e9ecef;
    }

    .dropdown-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .order-count {
        background: #1f9f77;
        color: white;
        padding: 5px 12px;
        border-radius: 20px;
        font-size: 14px;
        font-weight: 600;
    }

    .ordered-list {
        background: white;
        padding: 15px;
        border-radius: 8px;
        border: 1px solid #dee2e6;
    }

    .archived-row {
        background-color: #f8f9fa !important;
        opacity: 0.8;
    }

        .archived-row td {
            color: #6c757d !important;
        }
</style>

<!-- Toast Notification -->
<div id="toastBackdrop" class="toast-backdrop"></div>
<div id="toastNotification" class="toast-notification">
    <span class="toast-icon">✅</span>
    <span class="toast-message" id="toastMessage">Operation completed successfully!</span>
</div>

<!-- Main Content -->
<main class="main-content" id="mainContent">
    <!-- Dashboard Home -->
    @if (ViewContext.RouteData.Values["action"].ToString() == "Index")
    {
        <div class="welcome-panel">
            <h1 class="welcome-title">Welcome to Your Dashboard</h1>
            <p class="welcome-subtitle">Manage your prescriptions, orders, and medications in one place</p>

            <div class="feature-grid">
                <div class="feature-card">
                    <div class="feature-icon">📥</div>
                    <div class="feature-title">Upload Prescription</div>
                    <div class="feature-desc">Upload your doctor's prescription for processing</div>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">🛒</div>
                    <div class="feature-title">Place Orders</div>
                    <div class="feature-desc">Order medications from processed prescriptions</div>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">📦</div>
                    <div class="feature-title">Track Orders</div>
                    <div class="feature-desc">Monitor your order status and medication fulfillment</div>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">🔁</div>
                    <div class="feature-title">Manage Repeats</div>
                    <div class="feature-desc">Request refills for your repeat medications</div>
                </div>
            </div>
        </div>
    }

    <!-- Upload Prescription Section -->
    @if (ViewContext.RouteData.Values["action"].ToString() == "UploadPrescription")
    {
        <div class="upload-prescription-panel">
            <h2>📥 Upload Prescription</h2>

            <!-- Upload Status Messages -->
            <div id="uploadStatus"></div>

            <!-- Upload Progress -->
            <div id="uploadProgress" class="upload-progress">
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill"></div>
                </div>
                <p id="progressText">Uploading...</p>
            </div>

            <!-- Upload Form -->
            <form id="uploadForm" method="post" enctype="multipart/form-data">
                @Html.AntiForgeryToken()

                <!-- Drop area -->
                <div id="drop-area" class="drop-area">
                    <p>Drag & Drop PDF file here or click to select</p>
                    <input type="file" id="prescriptionFile" name="file" accept=".pdf" required hidden>
                </div>

                <!-- File preview with remove button -->
                <div id="filePreview" class="file-preview" style="display:none;">
                    <span id="fileName"></span>
                    <button type="button" class="btn-remove" onclick="removeSelectedFile()">Remove</button>
                </div>

                <!-- Dispense checkbox -->
                <div class="checkbox-container">
                    <label class="checkbox-label">
                        <input type="checkbox" id="dispenseCheckbox" name="dispenseUponApproval">
                        Dispense this prescription upon approval
                    </label>
                </div>

                <!-- Upload Button -->
                <button type="button" class="btn-upload" onclick="uploadPrescription()">Upload Prescription</button>
            </form>

            <!-- Unprocessed Prescriptions -->
            <div style="margin-top: 40px;">
                <h2>📋 Unprocessed Prescriptions</h2>
                <div id="unprocessedPrescriptions">
                    @if (Model.UnprocessedPrescriptions.Any())
                    {
                        <table class="prescription-table">
                            <thead>
                                <tr>
                                    <th>Filename</th>
                                    <th>Date</th>
                                    <th>Status</th>
                                    <th>Dispense</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="unprocessedPrescriptionsBody">
                                @foreach (var prescription in Model.UnprocessedPrescriptions)
                                {
                                    <tr id="prescription-@prescription.PrescriptionID">
                                        <td class="filename-cell">Prescription_@(prescription.PrescriptionID.ToString("D3"))</td>
                                        <td>@prescription.DateIssued.ToString("yyyy-MM-dd")</td>
                                        <td>@(prescription.Status ?? "Pending")</td>
                                        <td>@(prescription.DispenseUponApproval ? "Yes" : "No")</td>
                                        <td>
                                            <div class="action-buttons">
                                                <button class="btn-upload btn-edit" onclick="openEditModal(@prescription.PrescriptionID)">Edit</button>
                                                <button class="btn-upload btn-view" onclick="viewPrescription(@prescription.PrescriptionID)">View</button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p id="noUnprocessedMessage" class="empty-state-message">📭 No unprocessed prescriptions found. <br><small>Upload a prescription to get started!</small></p>
                    }
                </div>
            </div>

            <!-- Processed Prescriptions -->
            <div style="margin-top: 40px;">
                <h2>✅ Processed Prescriptions</h2>
                <div id="processedPrescriptions">
                    @if (Model.ProcessedPrescriptions.Any())
                    {
                        <table class="prescription-table">
                            <thead>
                                <tr>
                                    <th>Filename</th>
                                    <th>Date</th>
                                    <th>Doctor</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="processedPrescriptionsBody">
                                @foreach (var prescription in Model.ProcessedPrescriptions)
                                {
                                    <tr id="processed-prescription-@prescription.PrescriptionID">
                                        <td class="filename-cell">Prescription_@(prescription.PrescriptionID.ToString("D3"))</td>
                                        <td>@prescription.DateIssued.ToString("yyyy-MM-dd")</td>
                                        <td>@(prescription.Doctors?.Name ?? "Not Assigned")</td>
                                        <td>
                                            @if (prescription.Status == "Processed")
                                            {
                                                <span class="status-badge status-approved">Processed</span>
                                            }
                                            else if (prescription.Status == "Partially Processed")
                                            {
                                                <span class="status-badge status-pending">Partially Processed</span>
                                            }
                                            else if (prescription.Status == "Rejected")
                                            {
                                                <span class="status-badge status-rejected">Rejected</span>
                                            }
                                            else
                                            {
                                                @prescription.Status
                                            }
                                        </td>
                                        <td>
                                            <div class="action-buttons">
                                                <button class="btn-upload" onclick="openOrderModal('@prescription.DateIssued.ToString("yyyy-MM-dd")', '@(prescription.Doctors?.Name ?? "Not Assigned")', @prescription.PrescriptionID)">Order</button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p id="noProcessedMessage" class="empty-state-message">🎉 All prescriptions have been ordered! <br><small>Check your order history below.</small></p>
                    }
                </div>
            </div>

            <!-- Ordered Prescriptions History -->
            <div style="margin-top: 40px;">
                <h2>📦 Ordered Prescriptions History</h2>
                <div class="ordered-prescriptions-section">
                    <div class="dropdown-header">
                        <button class="btn-upload" onclick="toggleOrderedPrescriptions()">
                            📋 Show Ordered Prescriptions History
                        </button>
                        <span class="order-count" id="orderedCount">0 prescriptions ordered</span>
                    </div>

                    <div id="orderedPrescriptionsList" class="ordered-list" style="display: none; margin-top: 15px;">
                        <table class="prescription-table">
                            <thead>
                                <tr>
                                    <th>Filename</th>
                                    <th>Date Ordered</th>
                                    <th>Order Number</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="orderedPrescriptionsBody">
                                <!-- Ordered prescriptions will be populated here -->
                            </tbody>
                        </table>
                        <p id="noOrderedMessage" style="text-align: center; padding: 20px; color: #666; display: none;">
                            No prescriptions ordered yet.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Place Order Section -->
    @if (ViewContext.RouteData.Values["action"].ToString() == "PlaceOrder")
    {
        <div class="upload-prescription-panel">
            <h2>🛒 Place Orders</h2>
            <p>This feature is currently available through the prescription ordering modal.</p>
            <p>Please go to <strong>Upload Prescription</strong> → Select a processed prescription → Click <strong>Order</strong> to place your medication order.</p>
        </div>
    }

    <!-- Other Sections -->
    @if (ViewContext.RouteData.Values["action"].ToString() == "TrackOrder" ||
    ViewContext.RouteData.Values["action"].ToString() == "ManageRepeats" ||
    ViewContext.RouteData.Values["action"].ToString() == "PrescriptionReport" ||
    ViewContext.RouteData.Values["action"].ToString() == "Profile")
    {
        <div class="upload-prescription-panel">
            <h2>Redirecting...</h2>
            <p>Please use the navigation menu to access this feature.</p>
            <p>If you're not redirected automatically, <a href="@Url.Action("Index", "CustomerDashboard")">click here</a> to return to the dashboard.</p>
        </div>

        <script>
            window.location.href = '@Url.Action(ViewContext.RouteData.Values["action"].ToString(), "CustomerDashboard")';
        </script>
    }
</main>

<!-- Medication Order Modal -->
<div id="orderModal" class="modal-overlay" style="display: none;">
    <div class="modal-content">
        <h2>🩺 Order Medication</h2>
        <div class="order-details">
            <p><strong>Date:</strong> <span id="modalDate">2025-05-13</span></p>
            <p><strong>Doctor:</strong> <span id="modalDoctor">Dr. John Smith</span></p>
            <input type="hidden" id="modalPrescriptionId" value="0">
        </div>

        <table class="prescription-table">
            <thead>
                <tr>
                    <th>Select</th>
                    <th>Medication</th>
                    <th>Status</th>
                    <th>Prescribed Qty</th>
                    <th>Instructions</th>
                    <th>Repeats</th>
                    <th>Price (R)</th>
                    <th id="rejectionHeader" style="display: none;">Rejection Reason</th>
                </tr>
            </thead>
            <tbody id="modalMedications">
                <!-- Medications will be populated dynamically -->
            </tbody>
        </table>

        <div class="total-summary">
            <p><strong>Subtotal: R</strong><span id="subtotalAmount">0.00</span></p>
            <p><strong>VAT (15%): R</strong><span id="vatAmount">0.00</span></p>
            <p><strong>Total Due (incl. VAT): R</strong><span id="totalDue">0.00</span></p>
        </div>

        <div class="modal-buttons">
            <button class="btn-upload" onclick="placeMedicationOrder()">Place Order</button>
            <button class="btn-upload btn-secondary" onclick="closeModal()">Close</button>
        </div>
    </div>
</div>

<!-- Edit Prescription Modal -->
<div id="editPrescriptionModal" class="modal-overlay" style="display: none;">
    <div class="modal-content">
        <h2>Edit Prescription</h2>

        <!-- Edit Status Messages -->
        <div id="editStatus"></div>

        <!-- Simple prescription info -->
        <div class="prescription-info">
            <p><strong>Prescription:</strong> <span id="currentFileName">-</span></p>
            <p><strong>Status:</strong> <span id="editCurrentStatus">-</span></p>
        </div>

        <!-- Upload Form for Editing -->
        <form id="editUploadForm" method="post" enctype="multipart/form-data">
            @Html.AntiForgeryToken()
            <input type="hidden" id="editPrescriptionIdInput" name="id" value="0">

            <!-- Simple file upload -->
            <div style="margin-bottom: 20px;">
                <label style="display: block; margin-bottom: 8px; font-weight: 600;">Upload New Prescription</label>
                <div id="editDropArea" class="drop-area" style="padding: 20px;">
                    <p>📁 Click to select new PDF file</p>
                    <p style="font-size: 12px; color: #666; margin-top: 5px;">
                        Leave empty to keep current file
                    </p>
                    <input type="file" id="editPrescriptionFile" name="file" accept=".pdf" hidden>
                </div>

                <!-- File preview -->
                <div id="editFilePreview" class="file-preview" style="display:none;">
                    <span id="editFileName" style="font-weight: 500;"></span>
                    <button type="button" class="btn-remove" onclick="removeEditSelectedFile()">Remove</button>
                </div>
            </div>

            <!-- Simple checkbox -->
            <div class="checkbox-container">
                <label class="checkbox-label">
                    <input type="checkbox" id="editDispenseCheckbox" name="dispenseUponApproval">
                    Dispense upon approval
                </label>
            </div>

            <!-- Clear Action Buttons -->
            <div class="modal-buttons">
                <button type="button" class="btn-upload" onclick="updatePrescription()" style="min-width: 140px;">
                    Save Changes
                </button>
                <button type="button" class="btn-upload btn-danger" onclick="deletePrescription()" style="min-width: 140px;">
                    Delete
                </button>
                <button type="button" class="btn-upload btn-secondary" onclick="closeEditModal()" style="min-width: 140px;">
                    Cancel
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    // Enhanced Toast notification function
    function showToast(message, type = 'success', duration = 5000) {
        const toast = document.getElementById('toastNotification');
        const backdrop = document.getElementById('toastBackdrop');
        const toastMessage = document.getElementById('toastMessage');

        // Set message and style based on type
        toastMessage.textContent = message;

        // Remove previous classes
        toast.classList.remove('success', 'error', 'warning');
        toast.classList.add(type);

        // Set icon based on type
        const toastIcon = toast.querySelector('.toast-icon');
        if (type === 'error') {
            toastIcon.textContent = '❌';
        } else if (type === 'warning') {
            toastIcon.textContent = '⚠️';
        } else {
            toastIcon.textContent = '✅';
        }

        // Show toast with backdrop
        toast.classList.add('show');
        backdrop.classList.add('show');

        // Clear any existing timeout
        if (window.toastTimeout) {
            clearTimeout(window.toastTimeout);
        }

        // Hide after specified duration (default 5 seconds)
        window.toastTimeout = setTimeout(() => {
            hideToast();
        }, duration);
    }

    // Function to manually hide toast
    function hideToast() {
        const toast = document.getElementById('toastNotification');
        const backdrop = document.getElementById('toastBackdrop');

        toast.classList.remove('show');
        backdrop.classList.remove('show');

        if (window.toastTimeout) {
            clearTimeout(window.toastTimeout);
        }
    }

    // Ordered prescriptions management
    let orderedPrescriptions = JSON.parse(localStorage.getItem('orderedPrescriptions')) || [];

    // Initialize ordered prescriptions on page load
    function initializeOrderedPrescriptions() {
        updateOrderedPrescriptionsDisplay();
        checkEmptyLists();
    }

    // Toggle ordered prescriptions visibility
    function toggleOrderedPrescriptions() {
        const list = document.getElementById('orderedPrescriptionsList');
        const button = document.querySelector('.dropdown-header button');

        if (list.style.display === 'none') {
            list.style.display = 'block';
            button.innerHTML = '📋 Hide Ordered Prescriptions History';
            updateOrderedPrescriptionsDisplay();
        } else {
            list.style.display = 'none';
            button.innerHTML = '📋 Show Ordered Prescriptions History';
        }
    }

    // Update ordered prescriptions display
    function updateOrderedPrescriptionsDisplay() {
        const tbody = document.getElementById('orderedPrescriptionsBody');
        const noOrderedMessage = document.getElementById('noOrderedMessage');
        const orderedCount = document.getElementById('orderedCount');

        // Update count
        orderedCount.textContent = `${orderedPrescriptions.length} prescription${orderedPrescriptions.length !== 1 ? 's' : ''} ordered`;

        if (orderedPrescriptions.length === 0) {
            tbody.innerHTML = '';
            noOrderedMessage.style.display = 'block';
            return;
        }

        noOrderedMessage.style.display = 'none';

        // Sort by order date (newest first)
        const sortedPrescriptions = [...orderedPrescriptions].sort((a, b) =>
            new Date(b.orderDate) - new Date(a.orderDate)
        );

        tbody.innerHTML = sortedPrescriptions.map(prescription => `
            <tr class="archived-row">
                <td class="filename-cell">${prescription.filename}</td>
                <td>${new Date(prescription.orderDate).toLocaleDateString()}</td>
                <td><strong>${prescription.orderNumber}</strong></td>
                <td>
                    <span class="status-badge status-completed">✅ Ordered</span>
                </td>
                <td>
                    <div class="action-buttons">
                        <button class="btn-upload btn-view" onclick="viewOrderedPrescription(${prescription.prescriptionId})">
                            View Script
                        </button>
                        <button class="btn-upload btn-track" onclick="trackOrder('${prescription.orderNumber}', ${prescription.prescriptionId})">
                            📍 Track Order
                        </button>
                    </div>
                </td>
            </tr>
        `).join('');
    }

    // Add prescription to ordered history
    function addToOrderedHistory(prescriptionId, orderNumber, orderId) {
        const formattedId = prescriptionId.toString().padStart(3, '0');
        const filename = `Prescription_${formattedId}`;

        // Check if already exists
        const exists = orderedPrescriptions.some(p => p.prescriptionId === prescriptionId);
        if (!exists) {
            orderedPrescriptions.push({
                prescriptionId: prescriptionId,
                filename: filename,
                orderNumber: orderNumber,
                orderId: orderId,
                orderDate: new Date().toISOString()
            });

            // Save to localStorage
            localStorage.setItem('orderedPrescriptions', JSON.stringify(orderedPrescriptions));
            console.log('✅ Added to ordered history:', prescriptionId, 'Order:', orderNumber);
        }

        updateOrderedPrescriptionsDisplay();
    }

    // Track Order function - redirects to Track Order view and pre-selects the order
    function trackOrder(orderNumber, prescriptionId) {
        console.log('📍 Tracking order:', orderNumber, 'for prescription:', prescriptionId);

        // Store the order number and prescription ID in sessionStorage
        sessionStorage.setItem('trackOrderNumber', orderNumber);
        sessionStorage.setItem('trackPrescriptionId', prescriptionId.toString());

        // Show loading message
        showToast(`Redirecting to track order: ${orderNumber}`, 'info', 2000);

        // Redirect to Track Order page after a short delay
        setTimeout(() => {
            window.location.href = '@Url.Action("TrackOrder", "CustomerDashboard")';
        }, 1000);
    }

    // View ordered prescription
    function viewOrderedPrescription(prescriptionId) {
        window.open('@Url.Action("DownloadPrescription", "CustomerDashboard")/' + prescriptionId, '_blank');
    }

    // File upload functionality
    document.addEventListener("DOMContentLoaded", function () {
        setupFileUpload();
        setupEditFileUpload();
        initializeOrderedPrescriptions();

        // Allow clicking backdrop to close toast
        const backdrop = document.getElementById('toastBackdrop');
        if (backdrop) {
            backdrop.addEventListener('click', hideToast);
        }
    });

    function setupFileUpload() {
        const dropArea = document.getElementById('drop-area');
        const fileInput = document.getElementById('prescriptionFile');
        const filePreview = document.getElementById('filePreview');
        const fileNameDisplay = document.getElementById('fileName');

        if (!dropArea || !fileInput) return;

        dropArea.addEventListener('click', () => fileInput.click());

        fileInput.addEventListener('change', (e) => {
            handleFileUpload(e.target.files[0]);
        });

        dropArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropArea.classList.add('drag-over');
        });

        dropArea.addEventListener('dragleave', () => {
            dropArea.classList.remove('drag-over');
        });

        dropArea.addEventListener('drop', (e) => {
            e.preventDefault();
            dropArea.classList.remove('drag-over');
            const file = e.dataTransfer.files[0];
            if (file) {
                fileInput.files = e.dataTransfer.files;
                handleFileUpload(file);
            }
        });

        function handleFileUpload(file) {
            if (file.type !== 'application/pdf') {
                showUploadStatus('Please select a PDF file only.', 'error');
                return;
            }
            fileNameDisplay.textContent = file.name;
            filePreview.style.display = 'flex';
        }
    }

    function removeSelectedFile() {
        const fileInput = document.getElementById('prescriptionFile');
        const filePreview = document.getElementById('filePreview');
        const fileNameDisplay = document.getElementById('fileName');

        if (fileInput) {
            fileInput.value = "";
            filePreview.style.display = "none";
            fileNameDisplay.textContent = "";
        }
    }

    // Upload prescription via AJAX
    async function uploadPrescription() {
        const fileInput = document.getElementById('prescriptionFile');
        const file = fileInput.files[0];
        const dispenseCheckbox = document.getElementById('dispenseCheckbox');

        if (!file) {
            showUploadStatus('Please select a file to upload.', 'error');
            return;
        }

        if (file.type !== 'application/pdf') {
            showUploadStatus('Only PDF files are allowed.', 'error');
            return;
        }

        // Show progress
        showUploadProgress(true);
        showUploadStatus('', 'clear');

        const formData = new FormData();
        formData.append('file', file);
        formData.append('dispenseUponApproval', dispenseCheckbox.checked);
        formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

        try {
            const response = await fetch('@Url.Action("UploadPrescription", "CustomerDashboard")', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (result.success) {
                showUploadStatus('✅ ' + result.message, 'success');
                addPrescriptionToTable(result);
                removeSelectedFile();
                resetForm();
                refreshPrescriptionsData();
            } else {
                showUploadStatus('❌ ' + result.message, 'error');
            }
        } catch (error) {
            showUploadStatus('❌ Error uploading prescription: ' + error.message, 'error');
        } finally {
            showUploadProgress(false);
        }
    }

    function showUploadStatus(message, type) {
        const statusDiv = document.getElementById('uploadStatus');
        statusDiv.innerHTML = '';

        if (message) {
            const messageDiv = document.createElement('div');
            messageDiv.className = type === 'success' ? 'success-message' : 'error-message';
            messageDiv.textContent = message;
            statusDiv.appendChild(messageDiv);
        }
    }

    function showUploadProgress(show) {
        const progressDiv = document.getElementById('uploadProgress');
        if (show) {
            progressDiv.style.display = 'block';
            document.getElementById('progressFill').style.width = '0%';
        } else {
            progressDiv.style.display = 'none';
        }
    }

    function addPrescriptionToTable(result) {
        // Remove "no prescriptions" message if it exists
        const noUnprocessedMessage = document.getElementById('noUnprocessedMessage');
        if (noUnprocessedMessage) {
            noUnprocessedMessage.remove();
        }

        // Get or create the table body
        let tbody = document.getElementById('unprocessedPrescriptionsBody');
        if (!tbody) {
            // Create table structure if it doesn't exist
            const table = document.createElement('table');
            table.className = 'prescription-table';
            table.innerHTML = `
                <thead>
                    <tr>
                        <th>Filename</th>
                        <th>Date</th>
                        <th>Status</th>
                        <th>Dispense</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="unprocessedPrescriptionsBody"></tbody>
            `;
            document.getElementById('unprocessedPrescriptions').appendChild(table);
            tbody = document.getElementById('unprocessedPrescriptionsBody');
        }

        // Format the prescription ID with leading zeros
        const formattedId = result.prescriptionId.toString().padStart(3, '0');

        // Add new prescription row with View button instead of Download
        const newRow = document.createElement('tr');
        newRow.id = 'prescription-' + result.prescriptionId;
        newRow.innerHTML = `
            <td class="filename-cell">Prescription_${formattedId}</td>
            <td>${result.date}</td>
            <td>${result.status}</td>
            <td>${result.dispense}</td>
            <td>
                <div class="action-buttons">
                    <button class="btn-upload btn-edit" onclick="openEditModal(${result.prescriptionId})">Edit</button>
                    <button class="btn-upload btn-view" onclick="viewPrescription(${result.prescriptionId})">View</button>
                </div>
            </td>
        `;

        tbody.appendChild(newRow);
    }

    function resetForm() {
        document.getElementById('dispenseCheckbox').checked = false;
    }

    // View Prescription Function
    function viewPrescription(prescriptionId) {
        // Open the prescription in a new tab for viewing
        window.open('@Url.Action("DownloadPrescription", "CustomerDashboard")/' + prescriptionId, '_blank');
    }

    // Edit Prescription Modal Functions
    let currentEditPrescriptionId = null;

    function openEditModal(prescriptionId) {
        currentEditPrescriptionId = prescriptionId;
        document.getElementById("editPrescriptionModal").style.display = "flex";
        resetEditForm();
        loadPrescriptionDetails(prescriptionId);
    }

    function closeEditModal() {
        document.getElementById("editPrescriptionModal").style.display = "none";
        currentEditPrescriptionId = null;
    }

    async function loadPrescriptionDetails(prescriptionId) {
        try {
            showEditStatus('Loading prescription details...', 'info');

            const response = await fetch(`/CustomerDashboard/GetPrescriptionDetails?id=${prescriptionId}`);

            if (!response.ok) throw new Error('Network error');

            const result = await response.json();

            if (result.success) {
                document.getElementById("editCurrentStatus").textContent = result.status;
                document.getElementById("editPrescriptionIdInput").value = result.prescriptionId;
                document.getElementById("editDispenseCheckbox").checked = result.dispenseUponApproval;
                document.getElementById("currentFileName").textContent = result.fileName;

                showEditStatus('', 'clear');
            } else {
                showEditStatus(result.message, 'error');
            }
        } catch (error) {
            showEditStatus('Error loading details', 'error');
        }
    }

    function resetEditForm() {
        const fileInput = document.getElementById('editPrescriptionFile');
        const filePreview = document.getElementById('editFilePreview');

        if (fileInput) fileInput.value = "";
        if (filePreview) filePreview.style.display = "none";

        document.getElementById('editFileName').textContent = "";
        showEditStatus('', 'clear');
    }

    function removeEditSelectedFile() {
        const fileInput = document.getElementById('editPrescriptionFile');
        const filePreview = document.getElementById('editFilePreview');
        if (fileInput) {
            fileInput.value = "";
            filePreview.style.display = "none";
            document.getElementById('editFileName').textContent = "";
        }
    }

    function setupEditFileUpload() {
        const dropArea = document.getElementById('editDropArea');
        const fileInput = document.getElementById('editPrescriptionFile');
        const filePreview = document.getElementById('editFilePreview');

        if (!dropArea || !fileInput) return;

        dropArea.addEventListener('click', () => fileInput.click());

        fileInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file && file.type === 'application/pdf') {
                document.getElementById('editFileName').textContent = file.name;
                filePreview.style.display = 'flex';
            }
        });

        dropArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropArea.classList.add('drag-over');
        });

        dropArea.addEventListener('dragleave', () => {
            dropArea.classList.remove('drag-over');
        });

        dropArea.addEventListener('drop', (e) => {
            e.preventDefault();
            dropArea.classList.remove('drag-over');
            const file = e.dataTransfer.files[0];
            if (file) {
                fileInput.files = e.dataTransfer.files;
                if (file.type === 'application/pdf') {
                    document.getElementById('editFileName').textContent = file.name;
                    filePreview.style.display = 'flex';
                }
            }
        });
    }

    async function updatePrescription() {
        const fileInput = document.getElementById('editPrescriptionFile');
        const file = fileInput.files[0];
        const dispenseCheckbox = document.getElementById('editDispenseCheckbox');
        const prescriptionId = currentEditPrescriptionId;

        if (!prescriptionId) {
            showEditStatus('No prescription selected', 'error');
            return;
        }

        if (file && file.type !== 'application/pdf') {
            showEditStatus('Only PDF files allowed', 'error');
            return;
        }

        showEditStatus('Updating prescription...', 'info');

        const formData = new FormData();
        formData.append('id', prescriptionId);
        if (file) formData.append('file', file);
        formData.append('dispenseUponApproval', dispenseCheckbox.checked);
        formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

        try {
            const response = await fetch('/CustomerDashboard/UpdatePrescriptionDocument', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (result.success) {
                showEditStatus('Prescription updated successfully!', 'success');
                updatePrescriptionInTable(prescriptionId, result);
                setTimeout(() => {
                    closeEditModal();
                    refreshPrescriptionsData();
                }, 1500);
            } else {
                showEditStatus(result.message, 'error');
            }
        } catch (error) {
            showEditStatus('Error updating prescription', 'error');
        }
    }

    async function deletePrescription() {
        const prescriptionId = currentEditPrescriptionId;

        if (!prescriptionId) {
            showEditStatus('No prescription selected', 'error');
            return;
        }

        if (!confirm('Are you sure you want to delete this prescription? This cannot be undone.')) {
            return;
        }

        showEditStatus('Deleting prescription...', 'info');

        try {
            const formData = new FormData();
            formData.append('id', prescriptionId);
            formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

            const response = await fetch('/CustomerDashboard/DeletePrescription', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (result.success) {
                showEditStatus('Prescription deleted successfully!', 'success');
                removePrescriptionFromTable(prescriptionId);
                setTimeout(() => {
                    closeEditModal();
                    refreshPrescriptionsData();
                }, 1500);
            } else {
                showEditStatus(result.message, 'error');
            }
        } catch (error) {
            showEditStatus('Error deleting prescription', 'error');
        }
    }

    function showEditStatus(message, type) {
        const statusDiv = document.getElementById('editStatus');
        statusDiv.innerHTML = message ? `<div class="${type === 'success' ? 'success-message' : type === 'info' ? 'info-message' : 'error-message'}">${message}</div>` : '';
    }

    function updatePrescriptionInTable(prescriptionId, result) {
        const row = document.getElementById('prescription-' + prescriptionId);
        if (row) {
            row.cells[1].textContent = result.date;
            row.cells[3].textContent = result.dispense;
        }
    }

    function removePrescriptionFromTable(prescriptionId) {
        const row = document.getElementById('prescription-' + prescriptionId);
        if (row) row.remove();

        const tbody = document.getElementById('unprocessedPrescriptionsBody');
        if (tbody && tbody.children.length === 0) {
            document.getElementById('unprocessedPrescriptions').innerHTML = '<p id="noUnprocessedMessage" class="empty-state-message">📭 No unprocessed prescriptions found. <br><small>Upload a prescription to get started!</small></p>';
        }
    }

    // Modal functions
    function openOrderModal(date, doctor, prescriptionId) {
        console.log('Opening order modal for prescription:', prescriptionId);
        document.getElementById("modalDate").textContent = date;
        document.getElementById("modalDoctor").textContent = doctor;
        document.getElementById("modalPrescriptionId").value = prescriptionId;
        document.getElementById("orderModal").style.display = "flex";

        // Show loading state
        const tbody = document.getElementById('modalMedications');
        tbody.innerHTML = '<tr><td colspan="8" class="loading">🔄 Loading medications...</td></tr>';

        loadMedicationsForOrder(prescriptionId);
    }

    function closeModal() {
        document.getElementById("orderModal").style.display = "none";
    }

    async function loadMedicationsForOrder(prescriptionId) {
        try {
            console.log('Loading medications for prescription:', prescriptionId);

            const response = await fetch('@Url.Action("GetPrescriptionMedications", "CustomerDashboard")?prescriptionId=' + prescriptionId, {
                credentials: 'include'
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();

            // Handle error response from server
            if (result.success === false) {
                throw new Error(result.message);
            }

            const tbody = document.getElementById('modalMedications');
            tbody.innerHTML = '';

            if (!result || result.length === 0) {
                tbody.innerHTML = '<tr><td colspan="8" class="loading">No medications found for this prescription</td></tr>';
                return;
            }

            let hasRejectedMeds = false;

            result.forEach(med => {
                const isRejected = med.status === "Rejected";
                const isApproved = med.status === "Approved";

                if (isRejected) {
                    hasRejectedMeds = true;
                }

                const row = document.createElement('tr');
                if (isRejected) {
                    row.classList.add('rejected-row');
                }

                const statusBadge = isApproved ?
                    '<span class="status-badge status-approved">✅ Approved</span>' :
                    isRejected ?
                    '<span class="status-badge status-rejected">❌ Rejected</span>' :
                    '<span class="status-badge status-pending">⏳ Pending</span>';

                const checkbox = isRejected ?
                    `<input type="checkbox" class="med-check rejected-checkbox" disabled data-price="${med.price}" data-medicationid="${med.medicationId}" data-scriptlineid="${med.scriptLineId}">` :
                    `<input type="checkbox" class="med-check" data-price="${med.price}" data-medicationid="${med.medicationId}" data-scriptlineid="${med.scriptLineId}" onchange="updateTotal()">`;

                const quantityInput = `<input type="number" value="${med.quantity}" min="1" class="med-qty fixed-qty" readonly>`;

                const priceDisplay = isRejected ?
                    `<span class="rejected-price">R ${med.price.toFixed(2)}</span>` :
                    `R ${med.price.toFixed(2)}`;

                const rejectionCell = isRejected ?
                    `<td>${med.rejectionReason || 'No reason provided'}</td>` :
                    `<td style="display: none;"></td>`;

                row.innerHTML = `
                    <td>${checkbox}</td>
                    <td>${med.name}</td>
                    <td>${statusBadge}</td>
                    <td>${quantityInput}</td>
                    <td>${med.instructions}</td>
                    <td>${med.repeats}</td>
                    <td>${priceDisplay}</td>
                    ${rejectionCell}
                `;
                tbody.appendChild(row);
            });

            // Show/hide rejection header
            const rejectionHeader = document.getElementById('rejectionHeader');
            if (hasRejectedMeds) {
                rejectionHeader.style.display = 'table-cell';
            } else {
                rejectionHeader.style.display = 'none';
            }

            updateTotal();

        } catch (error) {
            console.error('Error loading medications:', error);
            const tbody = document.getElementById('modalMedications');
            tbody.innerHTML = '<tr><td colspan="8" class="error-message">❌ ' + error.message + '</td></tr>';
        }
    }

    function updateTotal() {
        let subtotal = 0;
        const checkboxes = document.querySelectorAll(".med-check:not(:disabled)");

        checkboxes.forEach(cb => {
            if (cb.checked) {
                const price = parseFloat(cb.getAttribute("data-price"));
                const qtyInput = cb.closest('tr').querySelector('.med-qty');
                const qty = parseInt(qtyInput.value) || 1;
                subtotal += price * qty;
            }
        });

        const vat = subtotal * 0.15;
        const totalDue = subtotal + vat;

        // Update all elements with null checks
        const subtotalElement = document.getElementById("subtotalAmount");
        const vatElement = document.getElementById("vatAmount");
        const totalElement = document.getElementById("totalDue");

        if (subtotalElement) subtotalElement.textContent = subtotal.toFixed(2);
        if (vatElement) vatElement.textContent = vat.toFixed(2);
        if (totalElement) totalElement.textContent = totalDue.toFixed(2);
    }

    // Enhanced placeMedicationOrder function
    async function placeMedicationOrder() {
        const selectedMedications = [];
        const prescriptionId = document.getElementById("modalPrescriptionId").value;

        console.log('🛒 Starting order for prescription:', prescriptionId);

        // Collect selected medications
        document.querySelectorAll('.med-check:not(:disabled):checked').forEach(checkbox => {
            const medicationId = checkbox.getAttribute('data-medicationid');
            const scriptLineId = checkbox.getAttribute('data-scriptlineid');
            const row = checkbox.closest('tr');
            const qtyInput = row.querySelector('.med-qty');
            const qty = parseInt(qtyInput.value) || 1;
            const instructions = row.cells[4].textContent;

            selectedMedications.push({
                medicationId: parseInt(medicationId),
                scriptLineId: parseInt(scriptLineId),
                quantity: qty,
                instructions: instructions,
                isRepeat: false
            });
        });

        if (selectedMedications.length === 0) {
            showToast('Please select at least one medication.', 'warning', 4000);
            return;
        }

        try {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            const response = await fetch('@Url.Action("SubmitOrder", "CustomerDashboard")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({
                    orderItems: selectedMedications,
                    prescriptionId: parseInt(prescriptionId),
                    doctorId: null
                })
            });

            const result = await response.json();

            if (result.success) {
                showToast(`✅ Order placed successfully! Order #: ${result.orderNumber}`, 'success', 5000);
                closeModal();

                // Add to ordered history with order ID
                addToOrderedHistory(parseInt(prescriptionId), result.orderNumber, result.orderId);

                // Remove from processed list immediately
                removePrescriptionFromProcessedList(prescriptionId);

                // Update UI
                setTimeout(() => {
                    checkEmptyLists();
                }, 300);

            } else {
                showToast('❌ Error: ' + result.message, 'error', 5000);
            }
        } catch (error) {
            console.error('Error placing order:', error);
            showToast('❌ Error placing order: ' + error.message, 'error', 5000);
        }
    }

    // Remove prescription from processed list
    function removePrescriptionFromProcessedList(prescriptionId) {
        console.log('🗑️ Removing prescription from processed list:', prescriptionId);

        const formattedId = prescriptionId.toString().padStart(3, '0');
        const targetText = `Prescription_${formattedId}`;

        // Remove from processed table
        const processedSection = document.getElementById('processedPrescriptions');
        if (processedSection) {
            const rows = processedSection.querySelectorAll('tbody tr');
            rows.forEach(row => {
                const cells = row.querySelectorAll('td');
                if (cells.length > 0 && cells[0].textContent.includes(targetText)) {
                    console.log('✅ Found and removing from processed list');
                    row.remove();
                }
            });
        }
    }

    // Enhanced checkEmptyLists function
    function checkEmptyLists() {
        // Check processed prescriptions
        const processedSection = document.getElementById('processedPrescriptions');
        if (processedSection) {
            const processedTable = processedSection.querySelector('table');
            const processedBody = processedSection.querySelector('tbody');
            const hasRows = processedBody && processedBody.querySelectorAll('tr').length > 0;
            const emptyMessage = document.getElementById('noProcessedMessage');

            if (!hasRows && !emptyMessage) {
                // Only show empty message if there are no rows AND no empty message exists
                const newEmptyMessage = document.createElement('p');
                newEmptyMessage.id = 'noProcessedMessage';
                newEmptyMessage.className = 'empty-state-message';
                newEmptyMessage.innerHTML = '🎉 All prescriptions have been ordered! <br><small>Check your order history below.</small>';
                newEmptyMessage.style.textAlign = 'center';
                newEmptyMessage.style.padding = '40px';
                newEmptyMessage.style.color = '#666';
                newEmptyMessage.style.fontSize = '16px';
                newEmptyMessage.style.background = '#f8f9fa';
                newEmptyMessage.style.borderRadius = '10px';
                newEmptyMessage.style.marginTop = '20px';

                if (processedTable) {
                    processedTable.remove();
                }
                processedSection.appendChild(newEmptyMessage);
            } else if (hasRows && emptyMessage) {
                // Remove empty message if rows exist
                emptyMessage.remove();
            }
        }

        // Check unprocessed prescriptions
        const unprocessedPrescriptionsDiv = document.getElementById('unprocessedPrescriptions');
        if (unprocessedPrescriptionsDiv) {
            const unprocessedTable = unprocessedPrescriptionsDiv.querySelector('table');
            const unprocessedBody = document.getElementById('unprocessedPrescriptionsBody');
            const hasRows = unprocessedBody && unprocessedBody.querySelectorAll('tr').length > 0;
            const emptyMessage = document.getElementById('noUnprocessedMessage');

            if (!hasRows && !emptyMessage) {
                const newEmptyMessage = document.createElement('p');
                newEmptyMessage.id = 'noUnprocessedMessage';
                newEmptyMessage.className = 'empty-state-message';
                newEmptyMessage.innerHTML = '📭 No unprocessed prescriptions found. <br><small>Upload a prescription to get started!</small>';
                newEmptyMessage.style.textAlign = 'center';
                newEmptyMessage.style.padding = '40px';
                newEmptyMessage.style.color = '#666';
                newEmptyMessage.style.fontSize = '16px';
                newEmptyMessage.style.background = '#f8f9fa';
                newEmptyMessage.style.borderRadius = '10px';
                newEmptyMessage.style.marginTop = '20px';

                if (unprocessedTable) {
                    unprocessedTable.remove();
                }
                unprocessedPrescriptionsDiv.appendChild(newEmptyMessage);
            } else if (hasRows && emptyMessage) {
                emptyMessage.remove();
            }
        }
    }

    // Refresh prescriptions data after operations
    async function refreshPrescriptionsData() {
        try {
            console.log('🔄 Refreshing prescriptions data...');

            // Use full page reload to ensure data consistency
            location.reload();

        } catch (error) {
            console.error('❌ Error refreshing data:', error);
            location.reload();
        }
    }
</script>
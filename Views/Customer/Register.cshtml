@model IbhayiPharmacy.Models.CustomerVM.CustomerRegisterViewModel

@{
    ViewData["Title"] = "Register";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Register</title>
    <link rel="stylesheet" href="~/css/Customer/Register.css" />
</head>
<body>
    <div class="register-container">
        <h2>Registration</h2>
        <form asp-action="Register" asp-controller="Customer" method="post" id="registerForm">
            <input asp-for="Name" placeholder="Name" />
            <span asp-validation-for="Name" class="error-message"></span>

            <input asp-for="Surname" placeholder="Surname" />
            <span asp-validation-for="Surname" class="error-message"></span>

            <input asp-for="IdNumber" placeholder="ID Number" />
            <span asp-validation-for="IdNumber" class="error-message"></span>

            <input asp-for="Cellphone" placeholder="Cellphone" />
            <span asp-validation-for="Cellphone" class="error-message"></span>

            <input asp-for="Email" placeholder="Email" />
            <span asp-validation-for="Email" class="error-message"></span>

            <div class="password-wrapper">
                <input asp-for="Password" type="password" placeholder="Password" id="Password" />
                <span class="toggle-icon" onclick="togglePassword('Password', this)">👁</span>
            </div>
            <span asp-validation-for="Password" class="error-message"></span>

            <div class="password-wrapper">
                <input asp-for="ConfirmPassword" type="password" placeholder="Confirm Password" id="ConfirmPassword" />
                <span class="toggle-icon" onclick="togglePassword('ConfirmPassword', this)">👁</span>
            </div>
            <span asp-validation-for="ConfirmPassword" class="error-message"></span>

            <!-- Allergy Picker -->
            <div class="allergy-section">
                <label for="allergySelect">Select Allergy</label>
                <select id="allergySelect" class="form-control">
                    <option value="" disabled selected hidden>Select an allergy</option>
                    @foreach (var allergy in Model.AllergiesList)
                    {
                        <option value="@allergy.Value">@allergy.Text</option>
                    }
                </select>
                <button type="button" id="addAllergyBtn" class="add-allergy-btn">Add Allergy</button>

                <ul id="allergyCart" class="allergy-cart">
                    @if (ViewBag.SelectedAllergyNames != null)
                    {
                        foreach (var name in (List<string>)ViewBag.SelectedAllergyNames)
                        {
                            <li>@name <button type="button" class="remove-btn" onclick="removeAllergyFromServerList(this)">×</button></li>
                        }
                    }
                </ul>
            </div>

            <input type="hidden" asp-for="SelectedAllergies" id="SelectedAllergies" value="@Model.SelectedAllergies" />

            <button type="submit">Submit</button>
        </form>
    </div>

    @section Scripts {
        <partial name="_ValidationScriptsPartial" />
        @* <script src="~/js/Customer/Register.js"></script> *@
    }

    <script>
        let allergies = [];

        document.addEventListener("DOMContentLoaded", () => {
            // Initialize from server-rendered JSON
            const selected = @Html.Raw(ViewBag.SelectedAllergiesJson ?? "[]");
            allergies = selected; // array of { AllergyId, Name }
            updateAllergyCart();
        });

        function updateAllergyCart() {
            const allergyCart = document.getElementById('allergyCart');
            const hiddenAllergiesInput = document.getElementById('SelectedAllergies');
            allergyCart.innerHTML = '';

            allergies.forEach((item, i) => {
                const li = document.createElement('li');
                li.textContent = item.Name;

                const btn = document.createElement('button');
                btn.type = 'button';
                btn.textContent = '×';
                btn.className = 'remove-btn';
                btn.onclick = () => removeAllergy(i);

                li.appendChild(btn);
                allergyCart.appendChild(li);
            });

            // Update hidden field with IDs only
            hiddenAllergiesInput.value = allergies.map(a => a.AllergyId).join(',');
        }

        function removeAllergy(i) {
            allergies.splice(i, 1);
            updateAllergyCart();
        }

        // Add allergy from dropdown
        document.getElementById('addAllergyBtn').addEventListener('click', () => {
            const select = document.getElementById('allergySelect');
            const chosenOption = select.options[select.selectedIndex];
            if (!chosenOption || chosenOption.value === "" || allergies.some(a => a.AllergyId == chosenOption.value)) return;

            allergies.push({ AllergyId: chosenOption.value, Name: chosenOption.text });
            updateAllergyCart();
        });

        // Password toggle
        function togglePassword(fieldId, icon) {
            const field = document.getElementById(fieldId);
            field.type = field.type === 'password' ? 'text' : 'password';
        }
    </script>
</body>
</html>

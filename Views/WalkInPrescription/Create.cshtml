@model IbhayiPharmacy.Models.PharmacistVM.WalkInPrescriptionVM
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = "Walk-In Prescription";
    var user = await UserManager.GetUserAsync(User);
    var userName = user?.UserName ?? "Pharmacist";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Walk-In Prescription - Ibhayi Pharmacy</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        /* ===== GLOBAL STYLES ===== */
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Segoe UI', sans-serif;
            background-color: #f4f6f9;
            color: #333;
            transition: all 0.3s;
        }

        /* ===== SIDEBAR ===== */
        .sidebar {
            width: 220px;
            background: linear-gradient(to bottom, #22586A, #22586A);
            height: 100vh;
            padding: 20px 0;
            position: fixed;
            top: 0;
            left: 0;
            box-shadow: 2px 0 10px rgba(0,0,0,0.1);
            z-index: 1000;
            transition: all 0.3s;
        }

            .sidebar.collapsed {
                width: 0;
                overflow: hidden;
                padding: 0;
            }

                .sidebar.collapsed .sidebar-header,
                .sidebar.collapsed .sidebar-nav,
                .sidebar.collapsed .sidebar-footer {
                    display: none;
                }

        .sidebar-header {
            padding: 0 20px 20px;
            border-bottom: 1px solid #34495e;
            margin-bottom: 15px;
            position: relative;
        }

        .sidebar h2 {
            font-size: 22px;
            margin: 0;
            color: white;
            display: flex;
            align-items: center;
            gap: 10px;
        }

            .sidebar h2 i {
                color: #3498db;
            }

        .sidebar-nav {
            padding: 0 10px;
        }

        .sidebar a {
            color: #ecf0f1;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 12px;
            margin: 8px 0;
            padding: 10px 15px;
            border-radius: 5px;
            transition: all 0.3s;
        }

            .sidebar a:hover, .sidebar a.active {
                background-color: #34495e;
                transform: translateX(5px);
            }

        .sidebar-footer {
            position: absolute;
            bottom: 20px;
            width: 100%;
            padding: 0 20px;
            font-size: 12px;
            color: #7f8c8d;
        }

        .toggle-sidebar {
            position: absolute;
            right: -15px;
            top: 20px;
            background: #3498db;
            color: white;
            border: none;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            transition: all 0.3s;
            z-index: 1001;
        }

        /* ===== LOGOUT FORM ===== */
        .logout-form {
            display: inline;
        }

        .btn-logout {
            background: transparent;
            border: none;
            color: #ecf0f1;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 12px;
            margin: 8px 0;
            padding: 10px 15px;
            border-radius: 5px;
            transition: all 0.3s;
            width: 100%;
            text-align: left;
            font-size: 14px;
            font-family: inherit;
        }

            .btn-logout:hover {
                background-color: #34495e;
                transform: translateX(5px);
            }

        /* ===== TOPBAR ===== */
        .topbar {
            background-color: #ffffff;
            height: 60px;
            padding: 0 20px;
            position: fixed;
            left: 220px;
            right: 0;
            top: 0;
            border-bottom: 1px solid #ccc;
            display: flex;
            justify-content: space-between;
            align-items: center;
            z-index: 999;
            transition: all 0.3s;
        }

        .sidebar.collapsed + .topbar {
            left: 0;
        }

        .topbar span {
            font-weight: bold;
            color: #2c3e50;
        }

        /* ===== MAIN CONTENT ===== */
        .main-content {
            margin-left: 220px;
            margin-top: 60px;
            padding: 30px;
            transition: all 0.3s;
        }

        .sidebar.collapsed + .topbar + .main-content {
            margin-left: 0;
        }

        /* ===== FORM LAYOUT ===== */
        .form-container {
            display: grid;
            grid-template-areas:
                "customer doctor"
                "pdf pdf"
                "meds meds";
            grid-template-columns: 1fr 1fr;
            gap: 25px;
            max-width: 1800px;
            margin: 0 auto;
        }

        .card {
            background: white;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            transition: all 0.3s;
        }

        .customer-card {
            grid-area: customer;
            min-height: 200px;
        }

        .doctor-card {
            grid-area: doctor;
            min-height: 200px;
        }

        .meds-card {
            grid-area: meds;
            position: relative;
            min-height: 600px;
        }

        .pdf-card {
            grid-area: pdf;
            height: 500px;
            overflow: hidden;
            border: 2px dashed #3498db;
        }

        h3 {
            color: #2c3e50;
            margin-top: 0;
            border-bottom: 3px solid #3498db;
            padding-bottom: 15px;
            margin-bottom: 25px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 1.4em;
        }

        .expand-btn {
            background: none;
            border: none;
            color: #3498db;
            cursor: pointer;
            font-size: 18px;
            padding: 8px;
        }

        /* ===== FORM ELEMENTS ===== */
        .form-group {
            margin-bottom: 25px;
        }

        label {
            display: block;
            margin-bottom: 10px;
            font-weight: 600;
            color: #34495e;
            font-size: 14px;
        }

        input, select, textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #e1e8ed;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s;
        }

            input:focus, select:focus, textarea:focus {
                border-color: #3498db;
                box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
                outline: none;
            }

        .info-box {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-top: 20px;
            border-left: 4px solid #3498db;
        }

        .customer-info {
            margin-bottom: 20px;
        }

            .customer-info p {
                margin-bottom: 8px;
                padding: 5px 0;
            }

            .customer-info strong {
                display: inline-block;
                width: 140px;
                color: #2c3e50;
            }

        .btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s;
        }

            .btn:hover {
                background: #2980b9;
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            }

        .btn-add {
            background: #27ae60;
        }

            .btn-add:hover {
                background: #219653;
            }

        .btn-alert {
            background: #e74c3c;
        }

            .btn-alert:hover {
                background: #c0392b;
            }

        .btn-done {
            background: #9b59b6;
        }

        /* ===== MEDICATION TABLE ===== */
        .medication-table-container {
            max-height: 400px;
            overflow-y: auto;
            border: 1px solid #e1e8ed;
            border-radius: 8px;
            margin-top: 20px;
        }

        .medication-table {
            width: 100%;
            border-collapse: collapse;
            min-width: 1200px;
        }

            .medication-table th {
                background: #3498db;
                color: white;
                padding: 16px 12px;
                text-align: left;
                position: sticky;
                top: 0;
                font-weight: 600;
                font-size: 14px;
            }

            .medication-table td {
                padding: 16px 12px;
                border-bottom: 1px solid #e1e8ed;
                vertical-align: top;
                background: white;
            }

                .medication-table td:first-child {
                    border-left: 1px solid #e1e8ed;
                }

                .medication-table td:last-child {
                    border-right: 1px solid #e1e8ed;
                }

            .medication-table tr:hover td {
                background-color: #f8f9fa;
            }

            .medication-table select,
            .medication-table input {
                margin: 0;
                border: 1px solid #ddd;
            }

        .med-details {
            font-size: 12px;
            color: #5d6d7e;
            margin-top: 8px;
            line-height: 1.5;
        }

        .allergy-alert {
            background-color: #fadbd8;
            color: #e74c3c;
            padding: 10px;
            border-radius: 6px;
            margin-top: 8px;
            display: none;
            font-size: 12px;
            border-left: 4px solid #e74c3c;
        }

        /* ===== SEARCHABLE SELECT ===== */
        .searchable-select {
            position: relative;
            width: 100%;
        }

            .searchable-select input {
                width: 100%;
                padding: 12px;
                border: 2px solid #e1e8ed;
                border-radius: 8px;
                font-size: 14px;
            }

            .searchable-select datalist {
                position: absolute;
                background: white;
                width: 100%;
                max-height: 250px;
                overflow-y: auto;
                border: 2px solid #e1e8ed;
                border-radius: 0 0 8px 8px;
                z-index: 100;
                box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            }

            .searchable-select option {
                padding: 12px 15px;
                cursor: pointer;
                border-bottom: 1px solid #f8f9fa;
            }

                .searchable-select option:hover {
                    background-color: #3498db;
                    color: white;
                }

        /* ===== PDF VIEWER ===== */
        #pdfViewer {
            height: 450px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .placeholder {
            color: #95a5a6;
            text-align: center;
            font-style: italic;
            font-size: 16px;
        }

        /* Approval buttons */
        .approval-buttons {
            display: flex;
            gap: 8px;
            justify-content: center;
        }

        .approve-btn {
            color: #27ae60;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 18px;
            padding: 8px;
            border-radius: 6px;
            transition: all 0.3s;
        }

            .approve-btn:hover {
                background-color: #d5f5e3;
                transform: scale(1.1);
            }

            .approve-btn:disabled {
                color: #bdc3c7;
                cursor: not-allowed;
            }

                .approve-btn:disabled:hover {
                    background-color: transparent;
                    transform: none;
                }

        .decline-btn {
            color: #e74c3c;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 18px;
            padding: 8px;
            border-radius: 6px;
            transition: all 0.3s;
        }

            .decline-btn:hover {
                background-color: #fadbd8;
                transform: scale(1.1);
            }

        .delete-btn {
            color: #95a5a6;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 18px;
            padding: 8px;
            border-radius: 6px;
            transition: all 0.3s;
        }

            .delete-btn:hover {
                color: #e74c3c;
                background-color: #fef9e7;
                transform: scale(1.1);
            }

        .status-indicator {
            font-size: 12px;
            margin-top: 8px;
            padding: 6px 12px;
            border-radius: 20px;
            display: inline-block;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .approved {
            background-color: #d5f5e3;
            color: #27ae60;
            border: 1px solid #27ae60;
        }

        .declined {
            background-color: #fadbd8;
            color: #e74c3c;
            border: 1px solid #e74c3c;
        }

        .pending {
            background-color: #fef9e7;
            color: #f39c12;
            border: 1px solid #f39c12;
        }

        /* Repeat columns */
        .repeats-input {
            width: 70px;
            text-align: center;
            padding: 8px;
        }

        .qty-input {
            width: 80px;
            padding: 8px;
            text-align: center;
        }

        /* ===== FORM FOOTER BUTTONS ===== */
        .form-footer {
            display: flex;
            justify-content: space-between;
            margin-top: 30px;
            padding: 20px 0;
            border-top: 2px solid #e1e8ed;
        }

        .form-footer-right {
            display: flex;
            gap: 15px;
        }

        /* Approval legend */
        .approval-legend {
            margin-top: 20px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            font-size: 13px;
            border-left: 4px solid #3498db;
        }

            .approval-legend i {
                margin-right: 8px;
                font-size: 14px;
            }

        /* ===== MODALS ===== */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 2000;
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background: white;
            padding: 30px;
            border-radius: 12px;
            width: 90%;
            max-width: 500px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }

        /* Rejection reason styles */
        .rejection-reason {
            margin-top: 15px;
            padding: 12px;
            background-color: #fadbd8;
            border-radius: 6px;
            font-size: 13px;
            display: none;
            border-left: 4px solid #e74c3c;
        }

            .rejection-reason p {
                margin: 5px 0;
                color: #e74c3c;
                font-weight: 500;
            }

        .stock-alert {
            background-color: #fef9e7;
            color: #f39c12;
            padding: 6px 10px;
            border-radius: 4px;
            margin-top: 5px;
            display: none;
            font-size: 11px;
            border-left: 3px solid #f39c12;
            font-weight: 500;
        }

        .out-of-stock-alert {
            background-color: #fadbd8;
            color: #e74c3c;
            padding: 6px 10px;
            border-radius: 4px;
            margin-top: 5px;
            display: none;
            font-size: 11px;
            border-left: 3px solid #e74c3c;
            font-weight: 500;
        }

        /* Alert styles */
        .alert {
            padding: 15px 20px;
            margin-bottom: 25px;
            border: 1px solid transparent;
            border-radius: 8px;
            font-weight: 500;
        }

        .alert-success {
            color: #155724;
            background-color: #d4edda;
            border-color: #c3e6cb;
        }

        .alert-danger {
            color: #721c24;
            background-color: #f8d7da;
            border-color: #f5c6cb;
        }

        .alert-warning {
            color: #856404;
            background-color: #fff3cd;
            border-color: #ffeaa7;
        }

        /* ===== ALLERGY SELECTION STYLES ===== */
        .allergy-section {
            margin: 20px 0;
        }

        .allergy-select-container {
            max-height: 200px;
            overflow-y: auto;
            border: 1px solid #e1e8ed;
            border-radius: 8px;
            padding: 10px;
            background: #f8f9fa;
        }

        .allergy-checkbox {
            display: flex;
            align-items: center;
            margin: 8px 0;
            padding: 8px;
            border-radius: 4px;
            transition: background-color 0.2s;
        }

            .allergy-checkbox:hover {
                background-color: #e8f4fd;
            }

            .allergy-checkbox input[type="checkbox"] {
                margin-right: 10px;
                transform: scale(1.2);
            }

        .allergy-cart-container {
            margin-top: 15px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            border-left: 4px solid #3498db;
        }

        .allergy-cart {
            list-style: none;
            margin-top: 10px;
        }

            .allergy-cart li {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 8px 12px;
                margin: 5px 0;
                background: white;
                border-radius: 4px;
                border: 1px solid #e1e8ed;
            }

        .remove-btn {
            background: #e74c3c;
            color: white;
            border: none;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
        }

            .remove-btn:hover {
                background: #c0392b;
            }

        /* ===== RESPONSIVE ===== */
        @@media (max-width: 1200px) {
            .form-container {
                grid-template-areas:
                    "customer"
                    "doctor"
                    "pdf"
                    "meds";
                grid-template-columns: 1fr;
            }

            .meds-card {
                min-height: auto;
            }

            .pdf-card {
                height: 400px;
            }

            .medication-table-container {
                overflow-x: auto;
            }
        }

        @@media (max-width: 768px) {
            .sidebar {
                width: 0;
            }

                .sidebar:not(.collapsed) {
                    width: 220px;
                }

            .topbar {
                left: 0;
            }

            .sidebar:not(.collapsed) + .topbar {
                left: 220px;
            }

            .main-content {
                margin-left: 0;
                padding: 20px;
            }

            .sidebar:not(.collapsed) + .topbar + .main-content {
                margin-left: 220px;
            }

            .form-footer {
                flex-direction: column;
                gap: 15px;
            }

            .form-footer-right {
                justify-content: stretch;
            }

                .form-footer-right .btn {
                    flex: 1;
                    text-align: center;
                }

            .card {
                padding: 20px;
            }

            .medication-table th,
            .medication-table td {
                padding: 12px 8px;
            }
        }
    </style>
</head>
<body>
    <!-- SIDEBAR -->
    <div class="sidebar">
        <div class="sidebar-header">
            <h2><i class="fas fa-prescription-bottle-alt"></i> Pharmacist Panel</h2>
            <button class="toggle-sidebar" onclick="toggleSidebar()">
                <i class="fas fa-chevron-left"></i>
            </button>
            <small style="color: #bdc3c7;">Dedicated Dictionary</small>
        </div>
        <nav class="sidebar-nav">
            <a href="#"><i class="fas fa-tachometer-alt"></i> Dashboard</a>
            <a href="#" class="active"><i class="fas fa-tachometer-alt"></i> Walk In Prescription</a>
            <a href="@Url.Action("Index", "PharmacistDispensing")"><i class="fas fa-clipboard-list"></i> Orders</a>
            <a href="@Url.Action("Index", "ScriptsProcessed")"><i class="fas fa-file-prescription"></i> Unprocessed Scripts</a>
            <a href="@Url.Action("ProcessedScripts", "ScriptsProcessed")"><i class="fas fa-boxes"></i> Processed Scripts</a>
            <a href="@Url.Action("CollectionTracking", "PharmacistDispensing")"><i class="fas fa-boxes"></i> Track Orders</a>
            <form class="logout-form" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                <button type="submit" class="btn-logout">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </button>
            </form>
        </nav>
        <div class="sidebar-footer">
            <p>Ibhayi Pharmacy v2.1</p>
        </div>
    </div>

    <!-- TOPBAR -->
    <div class="topbar">
        <span>Create Walk-In Prescription</span>
        <div>
            <button class="btn btn-add" onclick="toggleSidebar()" style="margin-right: 15px;">
                <i class="fas fa-bars"></i> Toggle Sidebar
            </button>
            Welcome, <strong>@userName</strong>
        </div>
    </div>

    <!-- MAIN CONTENT -->
    <div class="main-content">
        <!-- Validation Summary -->
        <div asp-validation-summary="ModelOnly" class="validation-summary-errors"></div>

        <!-- Display Messages -->
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success">
                <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
            </div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-circle"></i> @TempData["ErrorMessage"]
            </div>
        }
        @if (TempData["WarningMessage"] != null)
        {
            <div class="alert alert-warning">
                <i class="fas fa-exclamation-triangle"></i> @TempData["WarningMessage"]
            </div>
        }

        <form asp-action="Create" method="post" enctype="multipart/form-data" id="prescriptionForm">
            @Html.AntiForgeryToken()

            <div class="form-container">
                <!-- CUSTOMER CARD -->
                <div class="card customer-card">
                    <h3><i class="fas fa-user-injured"></i> Customer Information</h3>

                    <div class="form-group">
                        <label for="customerSearch">Select Patient</label>
                        <div class="searchable-dropdown">
                            <input type="text" id="customerSearch"
                                   placeholder="Type to search or click to see all patients..."
                                   autocomplete="off">
                            <div class="dropdown-results" id="customerResults"></div>
                        </div>
                        <input type="hidden" asp-for="CustomerId" id="customerId" />
                        <input type="hidden" asp-for="CustomerName" id="customerName" />
                        <input type="hidden" asp-for="CustomerIDNumber" id="customerIDNumber" />
                        <span asp-validation-for="CustomerId" class="field-validation-error"></span>
                    </div>

                    <div class="info-box" id="patientDetails" style="display: none;">
                        <p><strong>Name:</strong> <span id="displayCustomerName">-</span></p>
                        <p><strong>ID Number:</strong> <span id="displayCustomerID">-</span></p>
                        <p><strong>Allergies:</strong> <span id="displayAllergies">None recorded</span></p>
                    </div>

                    <button type="button" class="btn btn-add" id="addPatientBtn"><i class="fas fa-user-plus"></i> Register New Patient</button>
                </div>

                <!-- DOCTOR CARD -->
                <div class="card doctor-card">
                    <h3><i class="fas fa-user-md"></i> Doctor Information</h3>

                    <div class="form-group">
                        <label for="doctorSearch">Select Doctor</label>
                        <div class="searchable-dropdown">
                            <input type="text" id="doctorSearch"
                                   placeholder="Type to search or click to see all doctors..."
                                   autocomplete="off">
                            <div class="dropdown-results" id="doctorResults"></div>
                        </div>
                        <input type="hidden" asp-for="DoctorId" id="doctorId" />
                        <input type="hidden" asp-for="DoctorName" id="doctorName" />
                        <span asp-validation-for="DoctorId" class="field-validation-error"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="PrescriptionDate">Prescription Date</label>
                        <input asp-for="PrescriptionDate" type="date" class="form-control">
                        <span asp-validation-for="PrescriptionDate" class="field-validation-error"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="DispenseUponApproval">
                            <input asp-for="DispenseUponApproval" type="checkbox" /> Dispense Upon Approval
                        </label>
                    </div>

                    <div class="form-group">
                        <label asp-for="PrescriptionFile">Upload Prescription (Optional)</label>
                        <input asp-for="PrescriptionFile" type="file" accept=".pdf" class="form-control">
                        <span asp-validation-for="PrescriptionFile" class="field-validation-error"></span>
                    </div>

                    <button type="button" class="btn btn-add" id="addDoctorBtn" style="margin-top: 10px;">
                        <i class="fas fa-user-md"></i> Add New Doctor
                    </button>
                </div>

                <!-- MEDICATION CARD (FROM EDIT PAGE) -->
                <div class="card meds-card">
                    <h3>
                        <i class="fas fa-pills"></i> Medication Management
                        <span style="font-size: 14px; color: #7f8c8d; font-weight: normal;">- Process and manage prescription medications</span>
                    </h3>

                    <div class="medication-table-container">
                        <table class="medication-table">
                            <thead>
                                <tr>
                                    <th width="280px">Medication</th>
                                    <th width="90px">Quantity</th>
                                    <th width="260px">Instructions</th>
                                    <th width="220px">Details</th>
                                    <th width="80px">Repeat</th>
                                    <th width="100px">Repeats Left</th>
                                    <th width="100px">Status</th>
                                    <th width="120px">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="medsTableBody">
                                @for (int i = 0; i < Model.ScriptLines.Count; i++)
                                {
                                    <tr id="row-@i">
                                        <td>
                                            <div class="searchable-dropdown">
                                                <input type="hidden" name="ScriptLines[@i].MedicationId" value="@Model.ScriptLines[i].MedicationId" id="medId-@i" />
                                                <input type="text"
                                                       placeholder="Click to see all medications..."
                                                       class="medication-search"
                                                       data-index="@i"
                                                       autocomplete="off">
                                                <div class="dropdown-results medication-results" data-index="@i"></div>
                                            </div>
                                            <div id="allergy-alert-@i" class="allergy-alert" style="display: none;">
                                                <i class="fas fa-exclamation-triangle"></i> <strong>Allergy Warning:</strong> <span class="conflict-details"></span>
                                            </div>
                                            <div id="rejection-reason-@i" class="rejection-reason" style="display: none;">
                                                <p><strong>Reason:</strong> <span class="rejection-text"></span></p>
                                            </div>
                                            <span asp-validation-for="ScriptLines[i].MedicationId" class="field-validation-error"></span>
                                        </td>
                                        <td>
                                            <input type="number" name="ScriptLines[@i].Quantity" min="1" value="@Model.ScriptLines[i].Quantity" class="qty-input">
                                            <span asp-validation-for="ScriptLines[i].Quantity" class="field-validation-error"></span>
                                        </td>
                                        <td>
                                            <div class="searchable-dropdown">
                                                <input type="text"
                                                       placeholder="Click to see instructions..."
                                                       class="instruction-search"
                                                       data-index="@i"
                                                       autocomplete="off">
                                                <div class="dropdown-results instruction-results" data-index="@i"></div>
                                            </div>
                                            <span asp-validation-for="ScriptLines[i].Instructions" class="field-validation-error"></span>
                                        </td>
                                        <td>
                                            <div class="med-details" id="details-@i">
                                                <small class="placeholder">Select medication</small>
                                                <div class="stock-alert" id="stock-alert-@i" style="display: none;">
                                                    <i class="fas fa-exclamation-triangle"></i> Low stock!
                                                </div>
                                                <div class="out-of-stock-alert" id="out-of-stock-alert-@i" style="display: none;">
                                                    <i class="fas fa-times-circle"></i> Out of stock
                                                </div>
                                            </div>
                                        </td>
                                        <td style="text-align: center;">
                                            <input type="checkbox" id="repeat-check-@i" onchange="toggleRepeats(@i)" @(Model.ScriptLines[i].IsRepeat ? "checked" : "")>
                                            <input type="hidden" name="ScriptLines[@i].IsRepeat" value="@Model.ScriptLines[i].IsRepeat.ToString().ToLower()" id="repeat-hidden-@i" />
                                        </td>
                                        <td>
                                            <input type="number" name="ScriptLines[@i].RepeatsLeft" id="repeats-left-@i" min="0" value="@Model.ScriptLines[i].RepeatsLeft" class="repeats-input" @(!Model.ScriptLines[i].IsRepeat ? "disabled" : "")>
                                        </td>
                                        <td>
                                            <input type="hidden" name="ScriptLines[@i].Status" value="Pending" id="status-hidden-@i" />
                                            <input type="hidden" name="ScriptLines[@i].RejectionReason" value="@Model.ScriptLines[i].RejectionReason" id="rejection-reason-hidden-@i" />
                                            <span id="status-@i" class="status-indicator pending">
                                                Pending
                                            </span>
                                        </td>
                                        <td>
                                            <div class="approval-buttons">
                                                <button type="button" class="approve-btn" id="approve-btn-@i" onclick="approveMedication(@i)" title="Approve Medication">
                                                    <i class="fas fa-check-circle"></i>
                                                </button>
                                                <button type="button" class="decline-btn" onclick="openRejectionModal(@i)" title="Reject Medication">
                                                    <i class="fas fa-times-circle"></i>
                                                </button>
                                                <button type="button" class="delete-btn" onclick="deleteMedicationRow(@i)" title="Delete Row" @(Model.ScriptLines.Count == 1 ? "disabled" : "")>
                                                    <i class="fas fa-trash-alt"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <button type="button" class="btn btn-add" id="addMedBtn" style="margin-top: 20px;">
                        <i class="fas fa-plus"></i> Add New Medication
                    </button>

                    <div class="approval-legend">
                        <p><strong>Quick Guide:</strong></p>
                        <p><i class="fas fa-check-circle" style="color: #27ae60;"></i> Green check = Approve medication</p>
                        <p><i class="fas fa-times-circle" style="color: #e74c3c;"></i> Red X = Reject medication (provide reason)</p>
                        <p><i class="fas fa-trash-alt" style="color: #95a5a6;"></i> Trash = Remove medication row</p>
                        <p><i class="fas fa-info-circle" style="color: #3498db;"></i> <strong>Important:</strong> All alerts are informational only</p>
                    </div>

                    <div class="form-footer">
                        <button type="button" class="btn btn-alert" onclick="checkAllInteractions()">
                            <i class="fas fa-exclamation-triangle"></i> Check All Interactions
                        </button>
                        <div class="form-footer-right">
                            <button type="submit" class="btn btn-add" onclick="return validateBeforeSubmit()">
                                <i class="fas fa-save"></i> Save Prescription & Create Order
                            </button>
                        </div>
                    </div>
                </div>

                <!-- PDF VIEWER CARD -->
                <div class="card pdf-card">
                    <h3><i class="fas fa-file-pdf"></i> Prescription Preview</h3>
                    <div id="pdfViewer">
                        <p class="placeholder">Upload a prescription to preview.</p>
                    </div>
                </div>
            </div>
        </form>
    </div>

    <!-- PATIENT REGISTRATION MODAL -->
    <div class="modal" id="patientModal">
        <div class="modal-content">
            <div class="register-container">
                <h2>Register New Patient</h2>
                <form id="registerPatientForm">
                    <input type="text" id="newPatientName" name="name" placeholder="Name" required />
                    <span class="error-message" id="nameError"></span>

                    <input type="text" id="newPatientSurname" name="surname" placeholder="Surname" required />
                    <span class="error-message" id="surnameError"></span>

                    <input type="text" id="newPatientID" name="idNumber" placeholder="ID Number" required />
                    <span class="error-message" id="idError"></span>

                    <input type="tel" id="newPatientCellphone" name="cellphone" placeholder="Cellphone Number" required />
                    <span class="error-message" id="cellphoneError"></span>

                    <input type="email" id="newPatientEmail" name="email" placeholder="Email Address" required />
                    <span class="error-message" id="emailError"></span>

                    <div class="password-wrapper">
                        <input type="password" id="newPatientPassword" name="password" placeholder="Password" required />
                        <span class="toggle-icon" onclick="togglePassword('newPatientPassword', this)">
                            <i class="fas fa-eye"></i>
                        </span>
                    </div>
                    <span class="error-message" id="passwordError"></span>

                    <div class="password-wrapper">
                        <input type="password" id="newPatientConfirmPassword" name="confirmPassword" placeholder="Confirm Password" required />
                        <span class="toggle-icon" onclick="togglePassword('newPatientConfirmPassword', this)">
                            <i class="fas fa-eye"></i>
                        </span>
                    </div>
                    <span class="error-message" id="confirmPasswordError"></span>

                    <!-- Allergy picker with real Active Ingredients - NO CTRL KEY REQUIRED -->
                    <div class="allergy-section">
                        <label>Allergies (Select from Active Ingredients)</label>
                        <div class="allergy-select-container" id="allergyCheckboxContainer">
                            <!-- Allergy checkboxes will be loaded dynamically here -->
                        </div>
                        <small class="text-muted">Simply click on each allergy to select/deselect - no need to hold Ctrl</small>

                        <div class="allergy-cart-container">
                            <label>Selected Allergies:</label>
                            <ul id="allergyCart" class="allergy-cart"></ul>
                        </div>
                    </div>

                    <div class="modal-buttons">
                        <button type="button" class="btn" onclick="closeModal('patientModal')">Cancel</button>
                        <button type="button" class="btn btn-add" onclick="registerNewPatient()">Register Patient</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- DOCTOR MODAL -->
    <div class="modal" id="doctorModal">
        <div class="modal-content">
            <h3><i class="fas fa-user-md"></i> Add New Doctor</h3>
            <div class="form-group">
                <label for="newDoctorName">Doctor Name</label>
                <input type="text" id="newDoctorName" placeholder="Enter doctor's full name">
            </div>
            <div class="form-group">
                <label for="newDoctorSurname">Doctor Surname</label>
                <input type="text" id="newDoctorSurname" placeholder="Enter doctor's surname">
            </div>
            <div class="form-group">
                <label for="newDoctorPracticeNumber">Practice Number</label>
                <input type="text" id="newDoctorPracticeNumber" placeholder="Enter practice number">
            </div>
            <div class="form-group">
                <label for="newDoctorContact">Contact Number</label>
                <input type="tel" id="newDoctorContact" placeholder="Enter contact number">
            </div>
            <div class="form-group">
                <label for="newDoctorEmail">Email</label>
                <input type="email" id="newDoctorEmail" placeholder="Enter email address">
            </div>
            <div style="text-align: right; margin-top: 20px;">
                <button class="btn" onclick="closeModal('doctorModal')">Cancel</button>
                <button class="btn btn-add" onclick="registerNewDoctor()">Save Doctor</button>
            </div>
        </div>
    </div>

    <!-- REJECTION MODAL -->
    <div class="modal" id="rejectionModal">
        <div class="modal-content">
            <h3><i class="fas fa-times-circle"></i> Reason for Rejection</h3>
            <div class="form-group">
                <label>Select rejection reason:</label>
                <select id="rejectionReason" class="form-control">
                    <option value="">-- Select a reason --</option>
                    <option value="Patient allergic">Patient allergic to medication</option>
                    <option value="Medication Interaction">Medication interaction</option>
                    <option value="Patient has it">Patient already has sufficient supply</option>
                    <option value="Other">Other (specify)</option>
                </select>
            </div>
            <div class="form-group" id="otherReasonContainer" style="display: none;">
                <label for="otherReason">Specify reason:</label>
                <textarea id="otherReason" rows="3" class="form-control"></textarea>
            </div>
            <div style="text-align: right; margin-top: 20px;">
                <button class="btn" onclick="closeModal('rejectionModal')">Cancel</button>
                <button class="btn btn-alert" onclick="confirmRejection()">Confirm Rejection</button>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let currentCustomerAllergies = [];
        let rowCounter = @Model.ScriptLines.Count;
        let currentRejectionRow = null;
        let selectedAllergyIds = []; // Track selected allergy IDs

        // Common instructions for the dropdown
        const commonInstructions = [
            "Take 1 tablet daily",
            "Take 1 tablet twice daily",
            "Take 2 tablets at bedtime",
            "Take as needed for pain",
            "Take 1 capsule three times daily",
            "Use as needed for wheezing",
            "Apply thin layer to affected area twice daily",
            "Take with food",
            "Take on empty stomach",
            "Take with plenty of water",
            "Other (specify)"
        ];

        document.addEventListener('DOMContentLoaded', function() {
            console.log('Page loaded, initializing searchable dropdowns...');

            // Initialize all dropdown functionality
            setupSearchableDropdowns();

            // Initialize event listeners
            document.getElementById('addPatientBtn').addEventListener('click', function() {
                loadAllergyOptions();
                document.getElementById('patientModal').style.display = 'flex';
            });

            document.getElementById('addDoctorBtn').addEventListener('click', function() {
                document.getElementById('doctorModal').style.display = 'flex';
            });

            // PDF upload handler
            document.getElementById('PrescriptionFile')?.addEventListener('change', function(e) {
                const file = e.target.files[0];
                const pdfViewer = document.getElementById('pdfViewer');

                if (file && file.type === 'application/pdf') {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        pdfViewer.innerHTML = `
                            <embed src="${e.target.result}" type="application/pdf" width="100%" height="100%">
                        `;
                    };
                    reader.readAsDataURL(file);
                } else {
                    pdfViewer.innerHTML = '<p class="placeholder">Please upload a valid PDF file.</p>';
                }
            });

            // Initialize repeat toggles
            initRepeatToggles();

            // Load instruction dropdowns
            loadInstructionDropdowns();

            // Rejection reason select handler
            document.getElementById('rejectionReason').addEventListener('change', function() {
                const otherContainer = document.getElementById('otherReasonContainer');
                otherContainer.style.display = this.value === 'Other' ? 'block' : 'none';
            });
        });

        // Load real allergy options from database as checkboxes (NO CTRL REQUIRED)
        async function loadAllergyOptions() {
            try {
                const response = await fetch('@Url.Action("GetAllergyOptions", "WalkInPrescription")');
                const allergyOptions = await response.json();

                const allergyContainer = document.getElementById('allergyCheckboxContainer');
                allergyContainer.innerHTML = '';

                allergyOptions.forEach(allergy => {
                    const checkboxContainer = document.createElement('div');
                    checkboxContainer.className = 'allergy-checkbox';

                    const checkbox = document.createElement('input');
                    checkbox.type = 'checkbox';
                    checkbox.id = `allergy-${allergy.id}`;
                    checkbox.value = allergy.id;
                    checkbox.checked = selectedAllergyIds.includes(allergy.id);

                    const label = document.createElement('label');
                    label.htmlFor = `allergy-${allergy.id}`;
                    label.textContent = allergy.name;
                    label.style.cursor = 'pointer';
                    label.style.marginLeft = '5px';

                    // Add click event to toggle selection
                    checkbox.addEventListener('change', function() {
                        if (this.checked) {
                            if (!selectedAllergyIds.includes(allergy.id)) {
                                selectedAllergyIds.push(allergy.id);
                            }
                        } else {
                            selectedAllergyIds = selectedAllergyIds.filter(id => id !== allergy.id);
                        }
                        updateAllergyCart();
                    });

                    checkboxContainer.appendChild(checkbox);
                    checkboxContainer.appendChild(label);
                    allergyContainer.appendChild(checkboxContainer);
                });
            } catch (error) {
                console.error('Error loading allergies:', error);
            }
        }

        // Update allergy cart display
        function updateAllergyCart() {
            const allergyCart = document.getElementById('allergyCart');
            allergyCart.innerHTML = '';

            // Get selected allergy names
            const selectedAllergies = selectedAllergyIds.map(id => {
                const checkbox = document.querySelector(`input[value="${id}"]`);
                return checkbox ? checkbox.nextElementSibling.textContent : '';
            }).filter(name => name !== '');

            selectedAllergies.forEach((allergyName, index) => {
                const allergyId = selectedAllergyIds[index];
                const li = document.createElement('li');
                li.textContent = allergyName;

                const btn = document.createElement('button');
                btn.textContent = '×';
                btn.className = 'remove-btn';
                btn.onclick = () => removeAllergy(allergyId);

                li.appendChild(btn);
                allergyCart.appendChild(li);
            });
        }

        function removeAllergy(allergyId) {
            // Remove from selected array
            selectedAllergyIds = selectedAllergyIds.filter(id => id !== allergyId);

            // Uncheck the checkbox
            const checkbox = document.querySelector(`input[value="${allergyId}"]`);
            if (checkbox) {
                checkbox.checked = false;
            }

            updateAllergyCart();
        }

        // ... rest of the JavaScript code remains the same (all the search functions, medication handling, etc.)

        // Register new patient with real allergy system - UPDATED FOR CHECKBOXES
        async function registerNewPatient() {
            // selectedAllergyIds is already maintained globally

            const request = {
                name: document.getElementById('newPatientName').value,
                surname: document.getElementById('newPatientSurname').value,
                idNumber: document.getElementById('newPatientID').value,
                email: document.getElementById('newPatientEmail').value,
                cellphone: document.getElementById('newPatientCellphone').value,
                password: document.getElementById('newPatientPassword').value,
                confirmPassword: document.getElementById('newPatientConfirmPassword').value,
                selectedAllergyIds: selectedAllergyIds
            };

            try {
                const response = await fetch('@Url.Action("RegisterNewPatient", "WalkInPrescription")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(request)
                });

                const result = await response.json();

                if (result.success) {
                    // Auto-select the new customer
                    const customer = {
                        id: result.customerId,
                        text: result.customerName,
                        name: result.customerName.split(' ')[0],
                        surname: result.customerName.split(' ')[1],
                        idNumber: result.customerIDNumber
                    };
                    selectCustomer(customer);
                    closeModal('patientModal');

                    // Reset the form and selected allergies
                    document.getElementById('registerPatientForm').reset();
                    selectedAllergyIds = [];
                    updateAllergyCart();

                    alert(result.message);
                } else {
                    alert('Error: ' + result.error);
                }
            } catch (error) {
                console.error('Error registering customer:', error);
                alert('Error registering customer');
            }
        }

        // Toggle sidebar (from Edit page)
        function toggleSidebar() {
            const sidebar = document.querySelector('.sidebar');
            const toggleBtn = document.querySelector('.toggle-sidebar i');

            sidebar.classList.toggle('collapsed');

            if (sidebar.classList.contains('collapsed')) {
                toggleBtn.classList.remove('fa-chevron-left');
                toggleBtn.classList.add('fa-chevron-right');
            } else {
                toggleBtn.classList.remove('fa-chevron-right');
                toggleBtn.classList.add('fa-chevron-left');
            }
        }

        // ... rest of your existing JavaScript functions remain unchanged
        // (All the search functions, medication handling, validation, etc.)

    </script>
</body>
    <script>
        // Global variables
        let currentCustomerAllergies = [];
        let rowCounter = @Model.ScriptLines.Count;
        let currentRejectionRow = null;
        let selectedAllergyIds = []; // Track selected allergy IDs

        // Common instructions for the dropdown
        const commonInstructions = [
            "Take 1 tablet daily",
            "Take 1 tablet twice daily",
            "Take 2 tablets at bedtime",
            "Take as needed for pain",
            "Take 1 capsule three times daily",
            "Use as needed for wheezing",
            "Apply thin layer to affected area twice daily",
            "Take with food",
            "Take on empty stomach",
            "Take with plenty of water",
            "Other (specify)"
        ];

        // Single DOM ready init
        document.addEventListener('DOMContentLoaded', initWalkInScript);

        function initWalkInScript() {
            console.log('Page loaded, initializing searchable dropdowns...');

            setupSearchableDropdowns();

            // Event listeners (guard with optional chaining)
            document.getElementById('addPatientBtn')?.addEventListener('click', () => {
                loadAllergyOptions();
                document.getElementById('patientModal').style.display = 'flex';
            });

            document.getElementById('addDoctorBtn')?.addEventListener('click', () => {
                document.getElementById('doctorModal').style.display = 'flex';
            });

            // Attach handler for PDF input if present
            document.getElementById('PrescriptionFile')?.addEventListener('change', function (e) {
                const file = e.target.files[0];
                const pdfViewer = document.getElementById('pdfViewer');

                if (file && file.type === 'application/pdf') {
                    const reader = new FileReader();
                    reader.onload = function (evt) {
                        pdfViewer.innerHTML = `<embed src="${evt.target.result}" type="application/pdf" width="100%" height="100%">`;
                    };
                    reader.readAsDataURL(file);
                } else if (pdfViewer) {
                    pdfViewer.innerHTML = '<p class="placeholder">Please upload a valid PDF file.</p>';
                }
            });

            // Initialize repeat toggles for existing rows
            initRepeatToggles();

            // Prepare instruction dropdown handlers (existing rows)
            loadInstructionDropdowns();

            // Rejection reason select handler
            document.getElementById('rejectionReason')?.addEventListener('change', function () {
                const otherContainer = document.getElementById('otherReasonContainer');
                if (otherContainer) otherContainer.style.display = this.value === 'Other' ? 'block' : 'none';
            });

            // Wire add medication button (safe)
            document.getElementById('addMedBtn')?.addEventListener('click', addMedicationRow);

            // Allergy selection handling (checkbox container is dynamic)
            document.getElementById('allergyCheckboxContainer')?.addEventListener('change', updateAllergyCart);

            // Form submit validation
            document.getElementById('prescriptionForm')?.addEventListener('submit', function (e) {
                if (!validateBeforeSubmit()) e.preventDefault();
            });

            // Show server validation alert if present
            showServerValidationAlert();
        }

        // ------------------------------
        // Searchable dropdowns + results
        // ------------------------------
        function setupSearchableDropdowns() {
            // Customer search
            const customerSearch = document.getElementById('customerSearch');
            if (customerSearch) {
                customerSearch.addEventListener('click', () => searchCustomers(''));
                customerSearch.addEventListener('input', (e) => searchCustomers(e.target.value));
            }

            // Doctor search
            const doctorSearch = document.getElementById('doctorSearch');
            if (doctorSearch) {
                doctorSearch.addEventListener('click', () => searchDoctors(''));
                doctorSearch.addEventListener('input', (e) => searchDoctors(e.target.value));
            }

            // Medication and instruction dynamic handlers (delegation)
            document.addEventListener('click', function (e) {
                if (e.target.matches('.medication-search')) {
                    const index = e.target.getAttribute('data-index');
                    searchMedications('', index);
                }
                if (e.target.matches('.instruction-search')) {
                    const index = e.target.getAttribute('data-index');
                    showInstructions(index);
                }
            });

            document.addEventListener('input', function (e) {
                if (e.target.matches('.medication-search')) {
                    const index = e.target.getAttribute('data-index');
                    searchMedications(e.target.value, index);
                }
                if (e.target.matches('.instruction-search')) {
                    const index = e.target.getAttribute('data-index');
                    filterInstructions(e.target.value, index);
                }
            });

            // Close dropdowns when clicking outside searchable inputs
            document.addEventListener('click', function (e) {
                if (!e.target.matches('.searchable-dropdown input')) {
                    document.querySelectorAll('.dropdown-results').forEach(container => container.style.display = 'none');
                }
            }, true);
        }

        // Instruction helpers
        function loadInstructionDropdowns() {
            // no-op: we use delegated handlers; this function kept for clarity/extension
        }

        function showInstructions(index) {
            const resultsContainer = document.querySelector(`.instruction-results[data-index="${index}"]`);
            if (!resultsContainer) return;
            resultsContainer.innerHTML = '';
            resultsContainer.style.display = 'block';

            commonInstructions.forEach(instruction => {
                const item = document.createElement('div');
                item.className = 'dropdown-item';
                item.textContent = instruction;
                item.onclick = () => {
                    const input = document.querySelector(`.instruction-search[data-index="${index}"]`);
                    if (input) input.value = instruction;
                    resultsContainer.style.display = 'none';
                };
                resultsContainer.appendChild(item);
            });
        }

        function filterInstructions(searchTerm, index) {
            const resultsContainer = document.querySelector(`.instruction-results[data-index="${index}"]`);
            if (!resultsContainer) return;
            resultsContainer.innerHTML = '';
            resultsContainer.style.display = 'block';

            const filtered = commonInstructions.filter(inst => inst.toLowerCase().includes((searchTerm || '').toLowerCase()));
            if (filtered.length > 0) {
                filtered.forEach(inst => {
                    const item = document.createElement('div');
                    item.className = 'dropdown-item';
                    item.textContent = inst;
                    item.onclick = () => {
                        const input = document.querySelector(`.instruction-search[data-index="${index}"]`);
                        if (input) input.value = inst;
                        resultsContainer.style.display = 'none';
                    };
                    resultsContainer.appendChild(item);
                });
            } else {
                const item = document.createElement('div');
                item.className = 'dropdown-item';
                item.textContent = 'No instructions match your search';
                resultsContainer.appendChild(item);
            }
        }

        // ------------------------------
        // Server fetch helpers (customers, doctors, meds)
        // ------------------------------
        async function searchCustomers(searchTerm) {
            const resultsContainer = document.getElementById('customerResults');
            if (!resultsContainer) return;

            resultsContainer.innerHTML = '';
            resultsContainer.style.display = 'block';

            if (searchTerm === '') {
                const loadingItem = document.createElement('div');
                loadingItem.className = 'dropdown-item';
                loadingItem.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Loading customers...';
                resultsContainer.appendChild(loadingItem);
            }

            try {
                const resp = await fetch(`@Url.Action("SearchCustomers", "WalkInPrescription")?searchTerm=${encodeURIComponent(searchTerm)}`);
                if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
                const customers = await resp.json();
                resultsContainer.innerHTML = '';

                if (customers && customers.length) {
                    customers.forEach(c => {
                        const item = document.createElement('div');
                        item.className = 'dropdown-item';
                        item.innerHTML = `<div><strong>${c.text}</strong></div><small>ID: ${c.idNumber}</small>`;
                        item.onclick = () => selectCustomer(c);
                        resultsContainer.appendChild(item);
                    });
                } else {
                    const item = document.createElement('div');
                    item.className = 'dropdown-item';
                    item.textContent = searchTerm ? 'No customers match your search' : 'No customers found in database';
                    resultsContainer.appendChild(item);
                }
            } catch (err) {
                console.error('Error searching customers:', err);
                resultsContainer.innerHTML = `<div class="dropdown-item" style="color:#e74c3c"><i class="fas fa-exclamation-circle"></i> Error loading customers: ${err.message}</div>`;
            }
        }

        async function searchDoctors(searchTerm) {
            const resultsContainer = document.getElementById('doctorResults');
            if (!resultsContainer) return;

            resultsContainer.innerHTML = '';
            resultsContainer.style.display = 'block';

            if (searchTerm === '') {
                const loadingItem = document.createElement('div');
                loadingItem.className = 'dropdown-item';
                loadingItem.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Loading doctors...';
                resultsContainer.appendChild(loadingItem);
            }

            try {
                const resp = await fetch(`@Url.Action("SearchDoctors", "WalkInPrescription")?searchTerm=${encodeURIComponent(searchTerm)}`);
                if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
                const doctors = await resp.json();
                resultsContainer.innerHTML = '';

                if (doctors && doctors.length) {
                    doctors.forEach(d => {
                        const item = document.createElement('div');
                        item.className = 'dropdown-item';
                        item.innerHTML = `<div><strong>${d.text}</strong></div><small>Council #: ${d.practiceNumber}</small>`;
                        item.onclick = () => selectDoctor(d);
                        resultsContainer.appendChild(item);
                    });
                } else {
                    const item = document.createElement('div');
                    item.className = 'dropdown-item';
                    item.textContent = searchTerm ? 'No doctors match your search' : 'No doctors found in database';
                    resultsContainer.appendChild(item);
                }
            } catch (err) {
                console.error('Error searching doctors:', err);
                resultsContainer.innerHTML = `<div class="dropdown-item" style="color:#e74c3c"><i class="fas fa-exclamation-circle"></i> Error loading doctors: ${err.message}</div>`;
            }
        }

        async function searchMedications(searchTerm, rowIndex) {
            const resultsContainer = document.querySelector(`.medication-results[data-index="${rowIndex}"]`);
            if (!resultsContainer) return;

            resultsContainer.innerHTML = '';
            resultsContainer.style.display = 'block';

            if (searchTerm === '') {
                const loadingItem = document.createElement('div');
                loadingItem.className = 'dropdown-item';
                loadingItem.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Loading medications...';
                resultsContainer.appendChild(loadingItem);
            }

            try {
                const resp = await fetch(`@Url.Action("SearchMedications", "WalkInPrescription")?searchTerm=${encodeURIComponent(searchTerm)}`);
                if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
                const meds = await resp.json();
                resultsContainer.innerHTML = '';

                if (meds && meds.length) {
                    meds.forEach(med => {
                        const item = document.createElement('div');
                        item.className = 'dropdown-item';
                        item.innerHTML = `<div><strong>${med.displayName}</strong></div><small>${med.schedule} - R${med.price} - Stock: ${med.stock}</small>`;
                        item.onclick = () => selectMedication(med, rowIndex);
                        resultsContainer.appendChild(item);
                    });
                } else {
                    const item = document.createElement('div');
                    item.className = 'dropdown-item';
                    item.textContent = searchTerm ? 'No medications match your search' : 'No medications found in database';
                    resultsContainer.appendChild(item);
                }
            } catch (err) {
                console.error('Error searching medications:', err);
                resultsContainer.innerHTML = `<div class="dropdown-item" style="color:#e74c3c"><i class="fas fa-exclamation-circle"></i> Error loading medications: ${err.message}</div>`;
            }
        }

        // ------------------------------
        // Selection handlers
        // ------------------------------
        async function selectCustomer(customer) {
            document.getElementById('customerId').value = customer.id;
            document.getElementById('customerName').value = customer.name;
            document.getElementById('customerIDNumber').value = customer.idNumber;

            document.getElementById('customerSearch').value = customer.text;
            document.getElementById('customerResults').style.display = 'none';

            document.getElementById('displayCustomerName').textContent = customer.text;
            document.getElementById('displayCustomerID').textContent = customer.idNumber;

            try {
                const allergies = await loadCustomerAllergies(customer.id);
                const allergiesText = (allergies && allergies.length) ? allergies.map(a => a.name).join(', ') : 'None recorded';
                document.getElementById('displayAllergies').textContent = allergiesText;
                recheckAllAllergyConflicts();
            } catch (err) {
                console.error('Error loading customer allergies:', err);
                document.getElementById('displayAllergies').textContent = 'Error loading allergies';
            }

            document.getElementById('patientDetails').style.display = 'block';
        }

        function selectDoctor(doctor) {
            document.getElementById('doctorId').value = doctor.id;
            document.getElementById('doctorName').value = doctor.text;

            document.getElementById('doctorSearch').value = doctor.text;
            document.getElementById('doctorResults').style.display = 'none';
        }

        async function selectMedication(medication, index) {
            const medicationIdInput = document.getElementById(`medId-${index}`);
            const searchInput = document.querySelector(`.medication-search[data-index="${index}"]`);

            if (medicationIdInput) medicationIdInput.value = medication.id;
            if (searchInput) searchInput.value = medication.displayName;

            const detailsContainer = document.getElementById(`details-${index}`);
            if (detailsContainer) {
                detailsContainer.innerHTML = `
                    <small><strong>Active:</strong> ${medication.activeIngredients?.join(', ') || 'No ingredients listed'}</small><br>
                    <small><strong>Stock:</strong> ${medication.stock || 0}</small><br>
                    <small><strong>Reorder:</strong> ${medication.reorderLevel || 0}</small>
                `;
            }

            const stockAlert = document.getElementById(`stock-alert-${index}`);
            const outOfStockAlert = document.getElementById(`out-of-stock-alert-${index}`);
            const currentStock = medication.stock || 0;
            const reorderLevel = medication.reorderLevel || 0;

            if (stockAlert && outOfStockAlert) {
                if (currentStock === 0) {
                    outOfStockAlert.style.display = 'block';
                    outOfStockAlert.innerHTML = `<i class="fas fa-times-circle"></i> Out of stock`;
                    stockAlert.style.display = 'none';
                } else if (currentStock <= reorderLevel + 10) {
                    stockAlert.style.display = 'block';
                    stockAlert.innerHTML = `<i class="fas fa-exclamation-triangle"></i> Low stock`;
                    outOfStockAlert.style.display = 'none';
                } else {
                    stockAlert.style.display = 'none';
                    outOfStockAlert.style.display = 'none';
                }
            }

            // Delay allergy check slightly to ensure DOM reflects selection
            const customerId = document.getElementById('customerId')?.value;
            if (customerId) setTimeout(() => checkAllergyConflicts(medication.id, index), 100);

            const resultsContainer = document.querySelector(`.medication-results[data-index="${index}"]`);
            if (resultsContainer) resultsContainer.style.display = 'none';
        }

        // ------------------------------
        // Allergy functions
        // ------------------------------
        async function loadAllergyOptions() {
            try {
                const response = await fetch('@Url.Action("GetAllergyOptions", "WalkInPrescription")');
                if (!response.ok) throw new Error(`HTTP ${response.status}`);
                const allergyOptions = await response.json();

                const allergyContainer = document.getElementById('allergyCheckboxContainer');
                if (!allergyContainer) return;
                allergyContainer.innerHTML = '';

                allergyOptions.forEach(allergy => {
                    const checkboxContainer = document.createElement('div');
                    checkboxContainer.className = 'allergy-checkbox';

                    const checkbox = document.createElement('input');
                    checkbox.type = 'checkbox';
                    checkbox.id = `allergy-${allergy.id}`;
                    checkbox.value = allergy.id;
                    checkbox.checked = selectedAllergyIds.includes(allergy.id);

                    const label = document.createElement('label');
                    label.htmlFor = `allergy-${allergy.id}`;
                    label.textContent = allergy.name;
                    label.style.cursor = 'pointer';
                    label.style.marginLeft = '5px';

                    checkbox.addEventListener('change', function () {
                        if (this.checked) {
                            if (!selectedAllergyIds.includes(allergy.id)) selectedAllergyIds.push(allergy.id);
                        } else {
                            selectedAllergyIds = selectedAllergyIds.filter(id => id !== allergy.id);
                        }
                        updateAllergyCart();
                    });

                    checkboxContainer.appendChild(checkbox);
                    checkboxContainer.appendChild(label);
                    allergyContainer.appendChild(checkboxContainer);
                });
            } catch (err) {
                console.error('Error loading allergies:', err);
            }
        }

        function updateAllergyCart() {
            const allergyCart = document.getElementById('allergyCart');
            if (!allergyCart) return;
            allergyCart.innerHTML = '';

            const selectedAllergies = selectedAllergyIds.map(id => {
                const checkbox = document.querySelector(`input[value="${id}"]`);
                return checkbox ? checkbox.nextElementSibling.textContent : '';
            }).filter(name => name !== '');

            selectedAllergies.forEach((allergyName, index) => {
                const allergyId = selectedAllergyIds[index];
                const li = document.createElement('li');
                li.textContent = allergyName;

                const btn = document.createElement('button');
                btn.textContent = '×';
                btn.className = 'remove-btn';
                btn.onclick = () => removeAllergy(allergyId);

                li.appendChild(btn);
                allergyCart.appendChild(li);
            });
        }

        function removeAllergy(allergyId) {
            selectedAllergyIds = selectedAllergyIds.filter(id => id !== allergyId);
            const checkbox = document.querySelector(`input[value="${allergyId}"]`);
            if (checkbox) checkbox.checked = false;
            updateAllergyCart();
        }

        async function loadCustomerAllergies(customerId) {
            try {
                const response = await fetch(`@Url.Action("GetCustomerAllergies", "WalkInPrescription")?customerId=${customerId}`);
                if (!response.ok) throw new Error(`HTTP ${response.status}`);
                const allergies = await response.json();
                currentCustomerAllergies = allergies.map(a => a.name);
                return allergies;
            } catch (err) {
                console.error('Error loading customer allergies:', err);
                return [];
            }
        }

        async function checkAllergyConflicts(medicationId, rowIndex) {
            const customerId = document.getElementById('customerId')?.value;
            if (!customerId || !medicationId) {
                console.log('Missing customerId or medicationId:', { customerId, medicationId });
                return;
            }

            try {
                const response = await fetch(`@Url.Action("CheckAllergyConflicts", "WalkInPrescription")?customerId=${customerId}&medicationId=${medicationId}`);
                if (!response.ok) throw new Error(`HTTP ${response.status}`);
                const result = await response.json();
                console.log('Allergy check result:', result);

                const allergyAlert = document.getElementById(`allergy-alert-${rowIndex}`);
                if (result.hasConflicts && allergyAlert) {
                    allergyAlert.innerHTML = `<i class="fas fa-exclamation-triangle"></i> <strong>Allergy Warning:</strong> This medication contains: ${result.conflicts.join(', ')}`;
                    allergyAlert.style.display = 'block';
                    const displayAllergies = document.getElementById('displayAllergies');
                    if (displayAllergies) displayAllergies.textContent = currentCustomerAllergies.join(', ') + ' (CONFLICT DETECTED)';
                } else if (allergyAlert) {
                    allergyAlert.style.display = 'none';
                }
            } catch (err) {
                console.error('Error checking allergies:', err);
            }
        }

        function recheckAllAllergyConflicts() {
            for (let i = 0; i < rowCounter; i++) {
                const medicationId = document.getElementById(`medId-${i}`)?.value;
                if (medicationId) checkAllergyConflicts(medicationId, i);
            }
        }

        function debugAllergyState() {
            console.log('=== ALLERGY DEBUG INFO ===');
            console.log('Customer ID:', document.getElementById('customerId')?.value);
            console.log('Current Customer Allergies:', currentCustomerAllergies);
            for (let i = 0; i < rowCounter; i++) {
                const medId = document.getElementById(`medId-${i}`)?.value;
                const medName = document.querySelector(`.medication-search[data-index="${i}"]`)?.value;
                const allergyAlert = document.getElementById(`allergy-alert-${i}`);
                console.log(`Row ${i}:`, { medicationId: medId, medicationName: medName, allergyAlertVisible: allergyAlert?.style.display !== 'none' });
            }
            console.log('=== END DEBUG ===');
        }

        // ------------------------------
        // Medication row handling
        // ------------------------------
        function initRepeatToggles() {
            document.querySelectorAll('[id^="repeat-check-"]').forEach(checkbox => {
                const parts = checkbox.id.split('-');
                const id = parts[2];
                toggleRepeats(id);
            });
        }

        function toggleRepeats(rowId) {
            const checkbox = document.getElementById(`repeat-check-${rowId}`);
            const repeatsInput = document.getElementById(`repeats-left-${rowId}`);
            const hiddenInput = document.getElementById(`repeat-hidden-${rowId}`);

            if (checkbox && repeatsInput && hiddenInput) {
                repeatsInput.disabled = !checkbox.checked;
                hiddenInput.value = checkbox.checked.toString().toLowerCase();
                if (!checkbox.checked) repeatsInput.value = 0;
            }
        }

        function addMedicationRow() {
            const tbody = document.getElementById('medsTableBody');
            if (!tbody) return;

            const rowId = rowCounter++;
            const row = document.createElement('tr');
            row.id = `row-${rowId}`;
            row.innerHTML = `
                <td>
                    <div class="searchable-dropdown">
                        <input type="hidden" name="ScriptLines[${rowId}].MedicationId" value="" id="medId-${rowId}" />
                        <input type="text" placeholder="Click to see all medications..." class="medication-search" data-index="${rowId}" autocomplete="off">
                        <div class="dropdown-results medication-results" data-index="${rowId}"></div>
                    </div>
                    <div id="allergy-alert-${rowId}" class="allergy-alert" style="display: none;">
                        <i class="fas fa-exclamation-triangle"></i> <strong>Allergy Warning:</strong> <span class="conflict-details"></span>
                    </div>
                    <div id="rejection-reason-${rowId}" class="rejection-reason" style="display: none;">
                        <p><strong>Reason:</strong> <span class="rejection-text"></span></p>
                    </div>
                </td>
                <td>
                    <input type="number" name="ScriptLines[${rowId}].Quantity" min="1" value="1" class="qty-input">
                </td>
                <td>
                    <div class="searchable-dropdown">
                        <input type="text" placeholder="Click to see instructions..." class="instruction-search" data-index="${rowId}" autocomplete="off">
                        <div class="dropdown-results instruction-results" data-index="${rowId}"></div>
                    </div>
                </td>
                <td>
                    <div class="med-details" id="details-${rowId}">
                        <small class="placeholder">Select medication</small>
                        <div class="stock-alert" id="stock-alert-${rowId}" style="display: none;">
                            <i class="fas fa-exclamation-triangle"></i> Low stock!
                        </div>
                        <div class="out-of-stock-alert" id="out-of-stock-alert-${rowId}" style="display: none;">
                            <i class="fas fa-times-circle"></i> Out of stock
                        </div>
                    </div>
                </td>
                <td style="text-align: center;">
                    <input type="checkbox" id="repeat-check-${rowId}" onchange="toggleRepeats(${rowId})">
                    <input type="hidden" name="ScriptLines[${rowId}].IsRepeat" value="false" id="repeat-hidden-${rowId}" />
                </td>
                <td>
                    <input type="number" name="ScriptLines[${rowId}].RepeatsLeft" id="repeats-left-${rowId}" min="0" value="0" disabled class="repeats-input">
                </td>
                <td>
                    <input type="hidden" name="ScriptLines[${rowId}].Status" value="Pending" id="status-hidden-${rowId}" />
                    <input type="hidden" name="ScriptLines[${rowId}].RejectionReason" value="" id="rejection-reason-hidden-${rowId}" />
                    <span id="status-${rowId}" class="status-indicator pending">Pending</span>
                </td>
                <td>
                    <div class="approval-buttons">
                        <button type="button" class="approve-btn" id="approve-btn-${rowId}" onclick="approveMedication(${rowId})" title="Approve Medication">
                            <i class="fas fa-check-circle"></i>
                        </button>
                        <button type="button" class="decline-btn" onclick="openRejectionModal(${rowId})" title="Reject Medication">
                            <i class="fas fa-times-circle"></i>
                        </button>
                        <button type="button" class="delete-btn" onclick="deleteMedicationRow(${rowId})" title="Delete Row">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                    </div>
                </td>
            `;
            tbody.appendChild(row);
        }

        function deleteMedicationRow(rowId) {
            const row = document.getElementById(`row-${rowId}`);
            if (row) row.remove();
        }

        function approveMedication(rowId) {
            const medicationId = document.getElementById(`medId-${rowId}`)?.value;
            if (!medicationId) { alert('Please select a medication first before approving.'); return; }

            const statusElement = document.getElementById(`status-${rowId}`);
            const statusHidden = document.getElementById(`status-hidden-${rowId}`);
            if (statusElement) { statusElement.textContent = "Approved"; statusElement.className = "status-indicator approved"; }
            if (statusHidden) statusHidden.value = "Approved";

            const rejectionDiv = document.getElementById(`rejection-reason-${rowId}`);
            const rejectionHidden = document.getElementById(`rejection-reason-hidden-${rowId}`);
            if (rejectionDiv) rejectionDiv.style.display = 'none';
            if (rejectionHidden) rejectionHidden.value = '';

            const row = document.getElementById(`row-${rowId}`);
            if (row) row.classList.remove('rejected-row');

            const medicationSearch = document.querySelector(`.medication-search[data-index="${rowId}"]`);
            if (medicationSearch) { medicationSearch.style.textDecoration = ''; medicationSearch.style.color = ''; }
        }

        function openRejectionModal(rowId) {
            const medicationId = document.getElementById(`medId-${rowId}`)?.value;
            const medicationName = document.querySelector(`.medication-search[data-index="${rowId}"]`)?.value || '';

            if (!medicationId || !medicationName) {
                alert('Please select a medication first before rejecting.\n\nClick on the medication field and choose from the dropdown list.');
                return;
            }

            currentRejectionRow = rowId;
            document.getElementById('rejectionModal').style.display = 'flex';
            document.getElementById('rejectionReason').value = '';
            document.getElementById('otherReason').value = '';
            document.getElementById('otherReasonContainer').style.display = 'none';
        }

        function confirmRejection() {
            if (currentRejectionRow === null || currentRejectionRow === undefined) { alert('Error: No medication selected for rejection'); return; }

            const medicationId = document.getElementById(`medId-${currentRejectionRow}`)?.value;
            if (!medicationId) { alert('Error: No medication selected for rejection'); return; }

            const reasonSelect = document.getElementById('rejectionReason');
            let reason = reasonSelect?.value || '';

            if (reason === 'Other') {
                reason = document.getElementById('otherReason')?.value || '';
                if (!reason.trim()) { alert('Please specify the rejection reason'); return; }
            } else if (!reason) {
                alert('Please select a rejection reason'); return;
            }

            const statusElement = document.getElementById(`status-${currentRejectionRow}`);
            const statusHidden = document.getElementById(`status-hidden-${currentRejectionRow}`);
            const rejectionHidden = document.getElementById(`rejection-reason-hidden-${currentRejectionRow}`);

            if (!statusElement || !statusHidden || !rejectionHidden) { alert('Error: Could not find form elements'); return; }

            statusElement.textContent = "Rejected";
            statusElement.className = "status-indicator declined";
            statusHidden.value = "Rejected";
            rejectionHidden.value = reason;

            const rejectionDiv = document.getElementById(`rejection-reason-${currentRejectionRow}`);
            if (rejectionDiv) {
                const rejectionText = rejectionDiv.querySelector('.rejection-text');
                if (rejectionText) rejectionText.textContent = reason;
                rejectionDiv.style.display = 'block';
            }

            const row = document.getElementById(`row-${currentRejectionRow}`);
            if (row) row.classList.add('rejected-row');

            const medicationSearch = document.querySelector(`.medication-search[data-index="${currentRejectionRow}"]`);
            if (medicationSearch) { medicationSearch.style.textDecoration = 'line-through'; medicationSearch.style.color = '#95a5a6'; }

            closeModal('rejectionModal');
            currentRejectionRow = null;
        }

        // ------------------------------
        // Register patient/doctor
        // ------------------------------
        async function registerNewPatient() {
            const request = {
                name: document.getElementById('newPatientName')?.value,
                surname: document.getElementById('newPatientSurname')?.value,
                idNumber: document.getElementById('newPatientID')?.value,
                email: document.getElementById('newPatientEmail')?.value,
                cellphone: document.getElementById('newPatientCellphone')?.value,
                password: document.getElementById('newPatientPassword')?.value,
                confirmPassword: document.getElementById('newPatientConfirmPassword')?.value,
                selectedAllergyIds: selectedAllergyIds
            };

            try {
                const response = await fetch('@Url.Action("RegisterNewPatient", "WalkInPrescription")', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(request)
                });
                const result = await response.json();

                if (result.success) {
                    const customer = {
                        id: result.customerId,
                        text: result.customerName,
                        name: (result.customerName || '').split(' ')[0],
                        surname: (result.customerName || '').split(' ')[1] || '',
                        idNumber: result.customerIDNumber
                    };
                    selectCustomer(customer);
                    closeModal('patientModal');
                    document.getElementById('registerPatientForm')?.reset();
                    selectedAllergyIds = [];
                    updateAllergyCart();
                    alert(result.message);
                } else {
                    alert('Error: ' + (result.error || 'Unknown error'));
                }
            } catch (err) {
                console.error('Error registering customer:', err);
                alert('Error registering customer');
            }
        }

        async function registerNewDoctor() {
            const request = {
                name: document.getElementById('newDoctorName')?.value,
                surname: document.getElementById('newDoctorSurname')?.value,
                practiceNumber: document.getElementById('newDoctorPracticeNumber')?.value,
                contactNumber: document.getElementById('newDoctorContact')?.value,
                email: document.getElementById('newDoctorEmail')?.value
            };

            try {
                const response = await fetch('@Url.Action("RegisterNewDoctor", "WalkInPrescription")', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(request)
                });
                const result = await response.json();

                if (result.success) {
                    const doctor = {
                        id: result.doctorId,
                        text: result.doctorName,
                        practiceNumber: result.practiceNumber
                    };
                    selectDoctor(doctor);
                    closeModal('doctorModal');
                    alert(result.message);
                } else {
                    alert('Error: ' + (result.error || 'Unknown error'));
                }
            } catch (err) {
                console.error('Error registering doctor:', err);
                alert('Error registering doctor');
            }
        }

        // ------------------------------
        // Validation & UX helpers
        // ------------------------------
        function checkAllInteractions() {
            let hasAllergyConflicts = false;
            let hasLowStock = false;
            let hasOutOfStock = false;
            let hasRejected = false;
            let hasPending = false;
            let hasApproved = false;

            const customerId = document.getElementById('customerId')?.value;
            const doctorId = document.getElementById('doctorId')?.value;

            document.querySelectorAll('.allergy-alert').forEach(alert => { if (alert.style.display === 'block') hasAllergyConflicts = true; });
            document.querySelectorAll('.stock-alert').forEach(alert => { if (alert.style.display === 'block') hasLowStock = true; });
            document.querySelectorAll('.out-of-stock-alert').forEach(alert => { if (alert.style.display === 'block') hasOutOfStock = true; });
            document.querySelectorAll('.rejected-row').forEach(row => { hasRejected = true; });
            document.querySelectorAll('.status-indicator').forEach(status => {
                if (status.classList.contains('approved')) hasApproved = true;
                if (status.classList.contains('pending')) hasPending = true;
            });

            const issues = [];
            const warnings = [];
            const successes = [];

            if (!customerId) issues.push('• No customer selected');
            if (!doctorId) issues.push('• No doctor selected');

            let hasMedications = false;
            for (let i = 0; i < rowCounter; i++) {
                const medicationId = document.getElementById(`medId-${i}`);
                if (medicationId && medicationId.value) { hasMedications = true; break; }
            }
            if (!hasMedications) issues.push('• No medications added');

            if (hasAllergyConflicts) warnings.push('• Allergy conflicts detected');
            if (hasLowStock) warnings.push('• Low stock warnings');
            if (hasOutOfStock) warnings.push('• Out of stock medications');
            if (hasRejected) warnings.push('• Rejected medications');
            if (hasPending) warnings.push('• Pending medication approvals');
            if (hasApproved) successes.push('• Approved medications ready for dispensing');

            if (issues.length > 0) {
                let message = 'CRITICAL ISSUES - Please fix before submitting:\n\n' + issues.join('\n');
                if (warnings.length > 0) message += '\n\nWARNINGS (informational):\n' + warnings.join('\n');
                alert(message);
                return false;
            } else if (warnings.length > 0) {
                let message = 'The following warnings were found:\n\n' + warnings.join('\n');
                if (successes.length > 0) message += '\n\nPOSITIVE INDICATORS:\n' + successes.join('\n');
                message += '\n\nThese warnings are informational only and will not block the process.';
                alert(message);
            } else if (successes.length > 0) {
                alert('All checks passed!\n\n' + successes.join('\n') + '\n\nReady to submit prescription.');
            } else {
                alert('No issues detected, but please ensure all required fields are completed.');
            }

            return true;
        }

        function validateBeforeSubmit() {
            const customerId = document.getElementById('customerId')?.value;
            const doctorId = document.getElementById('doctorId')?.value;

            if (!customerId) { alert('Please select a customer before submitting.'); return false; }
            if (!doctorId) { alert('Please select a doctor before submitting.'); return false; }

            let hasMedications = false;
            let hasApprovedMedications = false;

            for (let i = 0; i < rowCounter; i++) {
                const medicationId = document.getElementById(`medId-${i}`);
                const statusHidden = document.getElementById(`status-hidden-${i}`);
                if (medicationId && medicationId.value) {
                    hasMedications = true;
                    if (statusHidden && statusHidden.value === 'Approved') hasApprovedMedications = true;
                }
            }

            if (!hasMedications) { alert('Please add at least one medication before submitting.'); return false; }

            if (!hasApprovedMedications) {
                const proceed = confirm('No medications are approved. This will create a prescription but no order will be generated.\n\nDo you want to continue?');
                if (!proceed) return false;
            }

            return confirm('Are you sure you want to submit this walk-in prescription?');
        }

        function closeModal(id) {
            const el = document.getElementById(id);
            if (el) el.style.display = 'none';
            if (id === 'rejectionModal') currentRejectionRow = null;
        }

        function togglePassword(fieldId, icon) {
            const field = document.getElementById(fieldId);
            if (!field) return;
            const isPass = field.type === 'password';
            field.type = isPass ? 'text' : 'password';
            icon.innerHTML = isPass ? '<i class="fas fa-eye-slash"></i>' : '<i class="fas fa-eye"></i>';
        }

        function showServerValidationAlert() {
            const validationSummary = document.querySelector('.validation-summary-errors');
            if (validationSummary && validationSummary.textContent.trim() !== '') {
                alert('Please fix the following errors:\n\n' + validationSummary.textContent);
            }
        }
    </script>
</html>